{"hash":"1acd9ff7544f5ebc679a6336555ee451878b9c4a","data":{"post":{"title":"Playing chords with Mido and Python","description":"Playing something that actually sounds musical","path":"/blog/playing-chords-with-mido-and-python/","content":"<p>Welcome back. This is part II of my python midi series. Part I can be found <a href=\"https://natespilman.com/blog/2020-03-23-generating-midi-music-stream-with-python/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here.</a></p>\n<p>Last time we set up our python program to successfully send a midi stream to our midi player. </p>\n<p>Today we're going to loop a basic chord progression, and add some texture. Again, my midi player is Ableton Live, but this will work for anything that takes midi input. </p>\n<hr>\n<h3 id=\"writing-chords--\"><a href=\"#writing-chords--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Writing Chords -</h3>\n<p>We're going to start with some basic minor and major triads - the root, the third and the fifth. The major third is 2 whole steps up from the root - 4 steps - and the minor third is a whole and a half step up from the root - 3 steps. </p>\n<p>First, our function setup - </p>\n<pre><code class=\"language-python\">import mido\nfrom time import sleep\n \ndef note(note,velocity = 64, time = 2):\n    return mido.Message('note_on',note=note,velocity = velocity, time=time)\n\ndef note_off(note,velocity = 64, time=2):\n    return mido.Message('note_off',note=note,velocity = velocity, time=time)\n\noutport = mido.open_output('IAC Driver pioneer')\n\ndef majorChord(root, duration):\n    outport.send(note(root))\n    outport.send(note(root+4))\n    outport.send(note(root+7))\n    sleep(duration)\n    outport.send(note_off(root))\n    outport.send(note_off(root+4))\n    outport.send(note_off(root+7))\n\ndef minorChord(root ,duration):\n    outport.send(note(root))\n    outport.send(note(root+3))\n    outport.send(note(root+7))\n    sleep(duration)\n    outport.send(note_off(root))\n    outport.send(note_off(root+3))\n    outport.send(note_off(root+7))\n</code></pre>\n<p>The <code>note</code> method returns a mido.Message object that is sent to the port. </p>\n<p>The <code>majorChord</code> and <code>minorChord</code> functions take in their root note, but also a duration argument. These functions play the chord, sleep for the duration, and then turn off the notes by triggering 'note_off' messages. </p>\n<p>With this, we can loop a nice chord progression like so - </p>\n<pre><code class=\"language-python\">C = 60 \nG = 55 \nA = 57 \nF = 53 \n\nwhile True:\n    majorChord(C,1)\n    majorChord(G,1)\n    minorChord(A,1)\n    majorChord(F,1)\n    majorChord(F,1)\n    majorChord(G,1)\n    majorChord(C,2)\n</code></pre>\n<p>Tada! we have a chord progression! It sounds a bit dull, though, so let's add some texture. </p>\n<iframe width=\"75%\" height=\"265\" src=\"https://clyp.it/2dtqyn41/widget\" frameborder=\"0\"></iframe>\n<hr>\n<h3 id=\"adding-texture--\"><a href=\"#adding-texture--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Adding Texture -</h3>\n<p>We're going to make two changes to make this progression sound less robotic. First, in our note generation, we've added a velocity modification variable. With every note generated, the velocity is now anywhere, randomly, between 44 and 84. This changes the intensity of the note. </p>\n<p>In addition, we've added a <code>pause</code> function, which inserts of <code>sleep</code> of anywhere between 0 and .05 seconds. We've added this pause between the  individual notes on the chord, everyso slightly staggering the notes. </p>\n<pre><code class=\"language-python\">def note(note,velocity = 64, time = 2):\n    velocity_modification = randint(-20,20)\n    return mido.Message('note_on',note=note,velocity = velocity + velocity_modification, time=time)\n\ndef note_off(note,velocity = 64, time=2):\n    return mido.Message('note_off',note=note,velocity = velocity, time=time)\n\ndef pause():\n    sleep(randint(0,100) * .0005)\n\ndef majorChord(root ,duration):\n    outport.send(note(root))\n    pause()\n    outport.send(note(root+4))\n    pause()\n    outport.send(note(root+7))\n    pause()\n    sleep(duration)\n    outport.send(note_off(root))\n    outport.send(note_off(root+4))\n    outport.send(note_off(root+7))\n\ndef minorChord(root ,duration):\n    outport.send(note(root))\n    pause()\n    outport.send(note(root+3))\n    pause()\n    outport.send(note(root+7))\n    sleep(duration) \n    outport.send(note_off(root))\n    outport.send(note_off(root+4))\n    outport.send(note_off(root+7))\n</code></pre>\n<p>And here is the output. </p>\n<iframe width=\"75%\" height=\"265\" src=\"https://clyp.it/g54lv0zg/widget\" frameborder=\"0\"></iframe>\n<p>You can hear how much more organic it sounds. Each loop is unique in its velocity and stagger values. </p>\n<p>Thanks for reading. Stay tuned for more python midi projects!</p>\n","date":"2020-03-24T04:34:19.922Z"}},"context":{}}