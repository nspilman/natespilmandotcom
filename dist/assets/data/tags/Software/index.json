{"hash":"1acd9ff7544f5ebc679a6336555ee451878b9c4a","data":{"tag":{"title":"software","belongsTo":{"edges":[{"node":{"title":"A year as a Software Engineer","path":"/blog/a-year-as-a-software-engineer/","description":"A crude list of what I've learned","tags":[{"title":"software"},{"title":"tech"},{"title":"career"}],"date":"17. May 2020","content":"<p>Time has flown since I started my first full time software developer role. I wanted to reflect on my time and try to identify all the important stuff I've learned over the year. </p>\n<h4 id=\"high-level-role-details--\"><a href=\"#high-level-role-details--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>High level role details -</h4>\n<ul>\n<li>\n<p>The role is full-stack. </p>\n<ul>\n<li>Stack: MS SQL Server, ASP.NET, Vue.Js, Azure DevOps. </li>\n<li>I use python and powershell from time to time for scripting purposes. </li>\n</ul>\n</li>\n<li>I am part of a self-organizing scrum team, following Agile practices to the best of our ability. </li>\n<li>We have a culture of paired programming. </li>\n<li>We both maintain a legacy application and build modern microservices. </li>\n</ul>\n<p>I've been fortunate to work on a team of experienced developers, willing to answer the mountain of questions I've had over the year. </p>\n<h3 id=\"general-software-development-stuff--\"><a href=\"#general-software-development-stuff--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>General Software Development stuff -</h3>\n<ul>\n<li>Educational code bases and enterprise production code bases are very different places. It's the difference between adding a field to a json return object and adding a field to the json return object except the value we're trying to pull is currently not exposed to this class, and we'd really rather not break encapsulation for this purpose - so maybe we can tunnel back down to a point where the code paths meet and grab the value there? Let me spend all day trying to figure this out. </li>\n<li>\n<p>Getting code to do the thing you want it to do is the easy part. Getting code in a state of long-term readability and maintainability is where things get difficult. </p>\n<ul>\n<li>When writing a script for my own use, it's fun to see how much I can fit on one line. When writing code that will be checked into a shared code base, I am NOT trying to fit everything on one line. Instead, I'm focusing on ensuring my method names are 100% in line with what the method actually does, my variable names make sense, and that everything is in its right place. </li>\n<li>If I start an explanation with \"it's a bit of a hack, but,...\" it means I should figure out a cleaner way of achieving what I need to do. No one will be able to read my \"creative\" code down the line, even if it serves its purpose now. </li>\n</ul>\n</li>\n<li>Coding languages and frameworks are all just higher level implementations of often the same thing. Different languages have more straightforward implementations of certain concepts, but at the end of the day, each language can be used to mostly achieve the same outcome. And with that, learning C# will make you a better Python developer. Learning Javascript will make you a better Go developer, etc. </li>\n<li>\n<p>Repeat code and over-coupling are the enemies of maintainable codebases. </p>\n<ul>\n<li>To use a house as an analogy - If you want to turn your bathroom light on, the switch you flip should be in one place and one place only, and it shouldn't require also turning on the kitchen garbage disposal. </li>\n</ul>\n</li>\n<li>\n<p>Legacy codebases are great educators. Code bases evolve, but if you're not careful, parts of the codebase will get left behind. Seeing the benign messes accidentally made is a constant reminder to be mindful of the code that I'm writing. </p>\n<ul>\n<li>Maybe there was a low level class that was perfect 10 years ago, but now doesn't make as much sense. Instead of rewriting this class when it was first identified that a change was necessary, someone wrote code on top of this class that modifies the data output to make more sense with our current needs. As time progressed and needs changed, more was built on top of this class, transforming the data into something previously unrecognizable. This code runs fine, but gets more and more difficult to work with, as there is now a behemoth of infrastructure in place to correct the low level error. It would now be quite a large job cleaning this up, as this fix infrastructure is now referenced all over the code base. It would have been a lot less expensive long-term to modify the underlying class before it became an overly coupled nightmare, but that ship sailed years ago. </li>\n</ul>\n</li>\n<li>\n<p>If you can't write a unit tests for your code, there's probably something wrong with it. </p>\n<ul>\n<li>In the above coupling example, if I were writing a unit test for turning on my bathroom light and found myself having to mock a garbage disposal, that'd be a pretty good indication that I had a problem. </li>\n<li>Things that are not unit testable, such as db connections, should have as little business logic as possible. All business logic should have corresponding unit tests. </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"c-net-specific-stuff\"><a href=\"#c-net-specific-stuff\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>C# .NET Specific stuff</h3>\n<p>I basically went from not knowing C# to being a competent C# developer. Most of the credit again goes to my brilliant ever-patient coworkers for walking me through all my questions and glaring shortcomings. </p>\n<p>C# is a fantastic language for writing robust, enterprise software. Microsoft is making the development experience easier and easier, and C# &#x26; the .NET framework continue improving at a rapid clip. </p>\n<p>Below is a quick list of the more technical things that have stuck with me. </p>\n<ul>\n<li>\n<p>Encapsulation is your friend. Everything should be private - encapsulated within the class - by default. Of course things that should be public should be public, but that should be an intentional design decision. </p>\n<ul>\n<li>To use a vacuum as an example - aren't we glad that the inner workings of the suction system don't have a public interface? Instead the only public interfaces are the power plug and the on/off button. </li>\n</ul>\n</li>\n<li>\n<p>Interfaces are your friend. This is a concept that took me longer to grasp, but without it it would be impossible to write and test software on a large scale. The way it's always described is as \"a contract,\" which is both true and only makes sense if you already understand the concept. </p>\n<ul>\n<li>The way I like to describe it is, say I have a bunch of different classes that represent a bunch of different potential employees. Some of these classes inherit the interface Chef, which means these classes implement all of the methods that is in the Chef interface. In english terms - it means they can cook. If we can a Restaurant class, with the power of interfaces, the Restaurant doesn't need to use any specific class in its code. It instead can write to the Chef interface - knowing confidently that when it calls Chef.Cook() on the interface, any of the classes that implement the Chef interface will know what that means. </li>\n<li>Let's say we have class Nate. Nate implements the Chef interface, meaning Nate can do all the things that a Chef can do. It doesn't matter how Nate does it - that's specific to Nate's implementation. Nate can also implement other interfaces. If Nate implemented the SoftwareDeveloper interface, it means that Nate can also be used by the SoftwareCompany class that uses the SoftwareDeveloper in its code. </li>\n<li>Interfaces are also necessary for testing. In the above example, if the Kitchen class, instead of coding to the Chef interface, they coded to Nate, which is a class that implements the Chef interface. If I want to test the Kitchen, we now have to instantiate Nate. But if Nate also implements the SoftwareDeveloper interface, there may be a whole lot of stuff that Nate needs for SoftwareDeveloper that we don't need for Chef. If we coded to the interface instead, we wouldn't have to spin up any of the SoftwareDeveloper dependencies to test the Kitchen. Instead we can create a new class - a Mock - that is used for testing purposes only, and doesn't require anything outside of the signature you're specifically mocking.</li>\n</ul>\n</li>\n<li>I've already alluded to it a few times - but I learned how to write unit tests. I've learned Unit Tests should be seen as the business requirements of the software. \"When A occurs, X should be the outcome.\" Untested code is dangerous code, because when you need to make a change in the future, you don't have a business requirement to test against. </li>\n<li>I'm a huge fan of paired programming. It's so easy to get lost in the weeds that it's helpful to have someone there to remind you of the bigger picture. It's easy to miss a typo that your pair catches in real time. It's much easier to process a complicated workflow by talking it through with a pair.  </li>\n</ul>\n<h3 id=\"soft-skills-stuff--\"><a href=\"#soft-skills-stuff--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Soft Skills Stuff -</h3>\n<p>Most of the items here I learned in my previous role as an Implementation Project Manager at Epic, but found effective application in the new role. </p>\n<ul>\n<li>\n<p>It's my responsibility to identify the delta between what I know and what I need to know, and then close that gap. I figure this out by asking questions until I no longer have questions. </p>\n<ul>\n<li>I spend a lot of time repeating back explanations to ensure I understand the concepts. Often I was off the mark with my understanding. </li>\n<li>One technique I learned at Epic that is works wonders for identifying gaps in understanding is to walk through your entire understanding of a technical workflow/concept/etc with the explicit instruction of \"Tell me where I'm wrong.\" </li>\n</ul>\n</li>\n<li>\n<p>I try my hardest to own my mistakes, publicly laugh at myself, and move on. If I broke something, it's better to own it and do what I can to fix it than try to hide it. There are some specific mistakes I made over the year that we as a team reference as education points. </p>\n<ul>\n<li>For example - I merged two feature branches when I meant to merge develop into a feature branch. We didn't notice for a few days. I then had to spend about a day and a half reverting and cherry picking commits to get us back to a clean place. We refer to this as \"Branchpocalypse\" and no one has made said mistake since. </li>\n</ul>\n</li>\n<li>Team culture is paramount. To paraphrase my company's CIO - \"We don't want any heroes. If you need to step up and be a hero, do, but then we need to figure out the systematic failure that required you to be a hero.\" We spend quality time as a team discussing the best way of doing things, and follow team agreements. So says the African proverb - \"If you want to go fast, go alone. If you want to go far, go together.\"</li>\n<li>Project management skills go a long way, even in this technical role. Clear note taking, confirmation that everyone's on the same page, understanding of who's responsible for what and by when, etc, have done me well this year, </li>\n</ul>\n<p>Parting thoughts - </p>\n<ul>\n<li>Azure DevOps is fantastic. It's a git based platform for maintaining code bases, and building and deploying applications from said code bases. There's learning curve, but the more I use it the more I love it. </li>\n<li>I look forward to all my second year in the biz will teach me. I look forward to seeing the downstream effects of team decisions made. I look forward to continuing to deliver quality software to our customers. </li>\n</ul>\n<p>Thanks for reading.</p>\n"}},{"node":{"title":"JPG Light Value Analysis with Python, PIL and MatPlotLib","path":"/blog/making-a-histogram-image-light-with-matplotlib/","description":"Building a Histogram to analyze the light values of an image","tags":[{"title":"python"},{"title":"matplotlib"},{"title":"histogram"},{"title":"data science"},{"title":"pillow"},{"title":"software"}],"date":"1. April 2020","content":"<p><em>All images used in this post are from the amazing <a href=\"Unsplash.com\">Unsplash.com</a></em></p>\n<h2 id=\"introduction\"><a href=\"#introduction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Introduction</h2>\n<p>We'll be making a histogram using <code>matplotlib</code> to display light distribution of pixel count in JPG images. Each pixel has an RGB value(red, green, blue) ranging 0 to 255, with the light value representing the sum of those values. <code>(0,0,0)</code> is black - zero light, and <code>(255,255,255)</code> is white - full light. Our <code>x</code> axis range will be 0 to 765. </p>\n<p>For example -  The light distribution of the this image ...</p>\n<p><br><img src=\"https://images.unsplash.com/photo-1583364481915-dacea3e06d18?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=600&#x26;q=80\" alt=\"alt text\" title=\"Example Image for Light Distribution\"></p>\n<p>is this - </p>\n<p><img src=\"/uploads/3lightdistroimages_introexample.png\"></p>\n<p>We can see a large distribution of dark pixels than light ones. </p>\n<p>Why are we doing this? Because we can! While I don't have a ton of specific use cases for this, being able to use data to answer questions is important. Our initial question is \"What is the light distribution of this image?\" </p>\n<h2 id=\"what-well-be-doing\"><a href=\"#what-well-be-doing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What we'll be doing?</h2>\n<p>All of the following steps are in Python.  </p>\n<ol>\n<li>Use <code>PIL</code> to load an image into memory. </li>\n<li>Shrink the image down to a pixel size we can more easily view. </li>\n<li>Use <code>numpy</code> to convert our image into an array. Flatten the 3d array into a 2d array of the RGB values. </li>\n<li>Convert the pixel array into an array of the pixel light values - the sun of the rgb values.  </li>\n<li>Use <code>matplotlib</code> to generate the histogram. </li>\n</ol>\n<p>Let's get started! </p>\n<hr>\n<h2 id=\"use-pil-to-load-an-image-into-memory\"><a href=\"#use-pil-to-load-an-image-into-memory\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Use PIL to load an image into memory.</h2>\n<p>PIL is an absolutely magical package for image processing.  I created the <code>getImageFromUrl(url)</code> method that takes in a url, uses python's <code>requests</code> package to make the https request, and then load the image. We need to pass the response content into BytesIO to read the requests content into a format that PIL can consume and convert into an Image object. </p>\n<p>By the end of this code, we have an image from the internet in memory as a PIL.Image object. </p>\n<pre><code class=\"language-python\">from PIL import Image\nimport requests\n\ndef getImageFromUrl(url):\n    response = requests.get(url)\n    return Image.open(BytesIO(response.content))\n\nimageUrl = \"https://images.unsplash.com/photo-1583364481915-dacea3e06d18?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=600&#x26;q=80\"\n\nimage = getImageFromUrl(imageUrl)\n</code></pre>\n<hr>\n<h2 id=\"shrink-the-image-down-to-a-pixel-size-we-can-more-easily-view\"><a href=\"#shrink-the-image-down-to-a-pixel-size-we-can-more-easily-view\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Shrink the image down to a pixel size we can more easily view.</h2>\n<p>I created a helper method to resize the image file so that it's largest side is a pixel count we pass in. This is to keep pixel count low enough to analyze quickly and in a controlled way. By the end of this block, we have a resized image with 150 pixels as the largest side, and the aspect ratio remaining the same. </p>\n<pre><code class=\"language-python\">def resize_setLargestSide(image,maxSide):\n    width,height = image.size\n    widthRatio = width / (width + height)\n    heightRatio = height / (width + height)\n    if width > height:\n        newWidth = maxSide\n        widthPlusHeight = newWidth / widthRatio\n        newHeight = widthPlusHeight - newWidth\n    else:\n        newHeight = maxSide\n        widthPlusHeight = newHeight / heightRatio\n        newWidth = widthPlusHeight - newHeight\n    return image.resize((int(newWidth),int(newHeight)))\n\nnewImage = resize_setLargestSide(image,150)\n</code></pre>\n<hr>\n<h2 id=\"use-numpy-to-convert-our-image-into-an-array-flatten-the-3d-array-into-a-2d-array-of-the-rgb-values\"><a href=\"#use-numpy-to-convert-our-image-into-an-array-flatten-the-3d-array-into-a-2d-array-of-the-rgb-values\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Use <code>numpy</code> to convert our image into an array. Flatten the 3d array into a 2d array of the RGB values.</h2>\n<p>the <code>np.array</code> method converts a PIL.Image object to a 3d np array - height by width by pixels (r,g,b). numpy arrays have the property <code>shape</code>, which in the case below returns the width, height, and 3, which is the length of the pixel. I create <code>flattenedShape</code> which will be used to convert the 3d array into a 2d array by multiplying the length by width, which is then passed into <code>reshape()</code>, a method that lives on the np array.</p>\n<p><code>reshape()</code> only works if the number of values remains the same, so had  I not multiplied width by height, <code>reshape()</code> would have failed. </p>\n<pre><code class=\"language-python\">import numpy as np\n\nimageArray = np.array(newImage)\nshape = imageArray.shape\nflattenedShape = (shape[0] * shape[1],shape[2])\nreshapedImage = imageArray.reshape(flattenedShape)\n</code></pre>\n<hr>\n<h2 id=\"convert-the-pixel-array-into-an-array-of-the-pixel-light-values---the-sun-of-the-rgb-values\"><a href=\"#convert-the-pixel-array-into-an-array-of-the-pixel-light-values---the-sun-of-the-rgb-values\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Convert the pixel array into an array of the pixel light values - the sun of the rgb values.</h2>\n<p>Boy do I love <a href=\"https://www.pythonforbeginners.com/basics/list-comprehensions-in-python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">list comprehensions.</a> Below takes the 2d array and converts it to a 1 dimensional array of pixel light values, by summing the 3 values of the pixel.  At this point, we have our data ready to graph!</p>\n<pre><code class=\"language-python\">lightValues = [sum(pixel) for pixel in reshapedImage]\n</code></pre>\n<hr>\n<h2 id=\"use-matplotlib-to-generate-the-histogram\"><a href=\"#use-matplotlib-to-generate-the-histogram\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Use <code>matplotlib</code> to generate the histogram.</h2>\n<p>And now, we graph! </p>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\n\nplt.hist(lightValues, bins=20, facecolor = 'blue')\nplt.ylabel(\"Amount of Light\")\nplt.xlabel(\"Pixel Concentration\")\nplt.title('Light Values')\nplt.axis([0,775,0,4000])\nplt.show()\n</code></pre>\n<h2 id=\"full-code\"><a href=\"#full-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Full Code</h2>\n<pre><code class=\"language-python\">from PIL import Image\nfrom io import BytesIO\nimport requests\n\ndef getImageFromUrl(url):\n    response = requests.get(url)\n    return Image.open(BytesIO(response.content))\n\nimageUrl = \"https://images.unsplash.com/photo-1583364481915-dacea3e06d18?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=600&#x26;q=80\"\n\nimage = getImageFromUrl(imageUrl)\n\ndef resize_setLargestSide(image,maxSide):\n    width,height = image.size\n    widthRatio = width / (width + height)\n    heightRatio = height / (width + height)\n    if width > height:\n        newWidth = maxSide\n        widthPlusHeight = newWidth / widthRatio\n        newHeight = widthPlusHeight - newWidth\n    else:\n        newHeight = maxSide\n        widthPlusHeight = newHeight / heightRatio\n        newWidth = widthPlusHeight - newHeight\n    return image.resize((int(newWidth),int(newHeight)))\n\nnewImage = resize_setLargestSide(image,150)\n\nimport numpy as np\n\nimageArray = np.array(newImage)\nshape = imageArray.shape\nflattenedShape = (shape[0] * shape[1],shape[2])\nreshapedImage = imageArray.reshape(flattenedShape)\n\nlightValues = [sum(pixel) for pixel in reshapedImage]\n\nimport matplotlib.pyplot as plt\n\nplt.hist(lightValues, bins=20, facecolor = 'blue')\nplt.ylabel(\"Amount of Light\")\nplt.xlabel(\"Pixel Concentration\")\nplt.title('Light Values')\nplt.axis([0,775,0,4000])\nplt.show()\n</code></pre>\n<h2 id=\"example-outputs\"><a href=\"#example-outputs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Example Outputs</h2>\n<h4 id=\"input\"><a href=\"#input\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>input</h4>\n<p><img src=\"https://images.unsplash.com/photo-1514729077270-37608dea7d7d?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=600&#x26;q=80\" alt=\"High Contrast - Dark and Light\" title=\"High Contrast - Dark and Light\"></p>\n<h4 id=\"output\"><a href=\"#output\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>output</h4>\n<p><img src=\"/uploads/3lightdistroimages_darkimage.png\" alt=\"Dark Image light distribution\" title=\"Dark Image light distribution\"></p>\n<hr>\n<h4 id=\"input-1\"><a href=\"#input-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>input</h4>\n<p><img src=\"https://images.unsplash.com/photo-1516649195228-a023c093df99?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=600&#x26;q=80\" alt=\"More Neutral Image\" title=\"More Neutral Image\"></p>\n<h4 id=\"output-1\"><a href=\"#output-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>output</h4>\n<p><img src=\"/uploads/3lightdistroimages_neutralimage.png\" alt=\"Dark Image neutral distribution\" title=\"Dark Image neutral distribution\"></p>\n<hr>\n<h4 id=\"input-2\"><a href=\"#input-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>input</h4>\n<p><img src=\"https://images.unsplash.com/photo-1538935516496-9972a989f715?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=600&#x26;q=80\" alt=\"Bright Image\" title=\"Bright Image\"></p>\n<h4 id=\"output-2\"><a href=\"#output-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>output</h4>\n<p><img src=\"/uploads/3lightdistroimages_lightimage.png\" alt=\"Dark Image light distribution\" title=\"Dark Image light distribution\"></p>\n"}},{"node":{"title":"My best-of beginner software development educational resources list","path":"/blog/my-best-of-beginner-software-development-educational-resources-list/","description":"The educational resources that got me going","tags":[{"title":"software"},{"title":"education"},{"title":"career"}],"date":"29. March 2020","content":"<p>Over the course of the last few years, I transitioned career roles from an IT implementation project manager to software developer. I wanted to share some of the free and inexpensive resources that helped me get started in my education. </p>\n<p><strong>Note</strong> If a Udemy course is listed about $20, just wait a day. The site is constantly running sales that slash their course prices from $199 to $10-$15. </p>\n<p>This list is sort of in order of my studies, as best as I can remember. </p>\n<h3 id=\"automate-the-boring-stuff-with-python\"><a href=\"#automate-the-boring-stuff-with-python\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://automatetheboringstuff.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Automate the Boring Stuff (with python)</a></h3>\n<p><strong>language</strong>: python</p>\n<p>This is the first course I went through, and is the one that kickstarted my educational journey. It is a book and a Udemy course, though the entirety of the text and examples are on the website for free. This book assumes you have no coding background. It goes through the absolute basics, from loops to if statements to functions, and has you reading and writing files by the end of the course. This course is intended to teach you the basics and instill confidence in your furthering your coding education. </p>\n<h3 id=\"colt-steeles-sql-course\"><a href=\"#colt-steeles-sql-course\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://www.udemy.com/course/the-ultimate-mysql-bootcamp-go-from-sql-beginner-to-expert/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Colt Steele's SQL course</a></h3>\n<p><strong>language</strong>: sql</p>\n<p>I was dealing with large amounts of data at work, and decided it was in my best interest to learn SQL(often pronounced \"sequel\"). SQL allows you to persist data in database tables, and query the data. Advanced SQL can get pretty crazy, but introductory SQL is actually quite easy. Colt Steele is one of the best coding educators on the web - to the point with a great sense of humor - and by the end of this course I was reading and writing to SQL tables. Python has built in extensions to work well great with <a href=\"https://www.sqlite.org/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sqlite</a>, allowing me to integrate read/write operations into my python programs. </p>\n<h3 id=\"colt-steeles-web-development-bootcamp\"><a href=\"#colt-steeles-web-development-bootcamp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://www.udemy.com/course/the-web-developer-bootcamp/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Colt Steele's Web Development Bootcamp</a></h3>\n<p><strong>language</strong>: html/css</p>\n<p>I switched gears here to learn how to make websites, as I was doing work with friends back on the East Coast, and I volunteered to be the web guy. Again, Colt is a great teacher. This course includes javascript education as well, but at this point I was mostly here for the html/css education. This course also taught me the Bootstrap CSS framework, which I used for quite some time. </p>\n<h3 id=\"flask---the-official-docs\"><a href=\"#flask---the-official-docs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://flask.palletsprojects.com/en/1.1.x/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flask - the Official docs</a></h3>\n<p><strong>language</strong>: python</p>\n<p>This isn't a course, but it is the next area I explored. Flask is a microframework for website serving, written in Python. With Flask, I could serve html pages. </p>\n<h3 id=\"nick-walters-django-course\"><a href=\"#nick-walters-django-course\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://www.udemy.com/course/the-ultimate-beginners-guide-to-django-django-2-python-web-dev-website/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nick Walter's Django course</a></h3>\n<p><strong>language</strong>: python</p>\n<p>Django is a powerful and scaleable web framework. It does the same stuff Flask does - but it's more robust and opinionated. Nick Walter does a great job bringing you from zero to hero in the Django framework. </p>\n<p>Instagram was built in Django. I ended up writing the website for the project with friends in Django - not that I'm comparing it to Instagram. I still have a Django server floating out there in a <a href=\"https://www.digitalocean.com/products/droplets/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Digital Ocean droplet</a> to host the random stuff I want on the internet. Shout out to <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-16-04\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this document specifically</a> for helping me set up Django on my linux server. I returned to it time and time again. </p>\n<h3 id=\"javascript---understanding-the-weird-parts\"><a href=\"#javascript---understanding-the-weird-parts\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://www.udemy.com/course/understand-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Javascript - Understanding the Weird Parts </a></h3>\n<p><strong>language</strong>: javascript</p>\n<p>Javascript is the language that runs in your browser, and many modern day websites are written entirely in javascript. This was my introduction to the language, and the course is quite the deep dive. At this point, my understanding of python was enough that I was able to compare the two languages.</p>\n<h3 id=\"wes-boss-js30\"><a href=\"#wes-boss-js30\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://javascript30.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wes Bos's JS30</a></h3>\n<p><strong>language</strong>: javascript</p>\n<p>This is the course that got me actually <em>liking</em> javascript. The course is available for free, and Wes sets up each lesson so that you learn something new with each lesson, and everything you build is actually really cool. By the end of the lesson, you have a drum kit that you just coded that you can play with your laptop keyboard - for example. </p>\n<h3 id=\"vue-js-2---the-complete-guide\"><a href=\"#vue-js-2---the-complete-guide\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://www.udemy.com/course/vuejs-2-the-complete-guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue JS 2 - The Complete Guide</a></h3>\n<p><strong>language</strong>: Vuejs (javascript)</p>\n<p>Vuejs is a javascript framework for developing single page applications. In the Vue vs. React vs. Angular (and now Svelte?) debate  I firmly believe Vue is a great first javascript framework to learn. I still use Vuejs quite a lot today - including with this blog. </p>\n<h3 id=\"modern-react-with-redux\"><a href=\"#modern-react-with-redux\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://www.udemy.com/course/react-redux/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Modern React with Redux</a></h3>\n<p><strong>language</strong>: ReactJs (javascript)</p>\n<p>After learning Vue, I learned React, the Facebook developed big dog of Javascript frameworks. Stephen Grider is a great instructor, and I regularly reference this course for some of the specific techniques we learn, such as handling resizing of images when queries from an API endpoint. I made a few websites for friends in React with what I learned from the course. </p>\n<p>React is best if you are comfortable writing in Javascript, as it really bakes itself into the language. </p>\n<h3 id=\"tim-coreys-c-intro-course\"><a href=\"#tim-coreys-c-intro-course\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://www.youtube.com/watch?v=h7aIzCkmbl8&#x26;list=PLLWMQd6PeGY2GVsQZ-u3DPXqwwKW8MkiP\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tim Corey's C# Intro Course</a></h3>\n<p><strong>language</strong>: C#</p>\n<p>Tim Corey is an amazing resource for all things C#. He has a ton of free content on his youtube channel, as well as paid courses on his website. This was my first entry into a statically typed object oriented language, and Tim does a great job explaining all the domain specific concepts that I didn't get prior with Python of Javascript. </p>\n<hr>\n<h3 id=\"and-by-this-point---i-was-a-software-developer\"><a href=\"#and-by-this-point---i-was-a-software-developer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>And by this point - I was a software developer</h3>\n<p>I spent a lot of time outside of these courses writing code and building based on what I learned. I learned python and sql quickly, since I was dealing with a lot of data at work, and had questions I needed answers to. I learned html/css/js to build websites for friends.  I was able to supplement my education by actually building things with what I was learning. If I could do it all again, I'd do it the exact same way. </p>\n"}},{"node":{"title":"The tech behind this website","path":"/blog/the-tech-behind-this-website/","description":"What it's built on and how it works","tags":[{"title":"tech"},{"title":"javascript"},{"title":"meta"},{"title":"Netlify"},{"title":"Gridsome"},{"title":"netlifycms"},{"title":"namecheap"},{"title":"vue.js"},{"title":"software"}],"date":"26. March 2020","content":"<h2 id=\"front-end---frameworks-and-styles--\"><a href=\"#front-end---frameworks-and-styles--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Front End - Frameworks and styles -</h2>\n<h3 id=\"gridsome---static-site-generation\"><a href=\"#gridsome---static-site-generation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gridsome - Static site generation</h3>\n<p><a href=\"https://gridsome.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gridsome.org/</a></p>\n<p>Gridsome is a static site generator that generates static html based on the presence of blog content - in my case markdown files. I have a folder called <code>blog/</code> to which I point my <code>gridsome.config</code> file, and basically say \"Generate a page per file in this per markdown file in this folder\". This is valuable because every time I want to write a new post, I just write it and put it in the right place, and gridsome generates the file on next build. </p>\n<p>I've used Gatsby in the past, which does the same thing that Gridsome does with React instead of Vue. I've found Gridsome to be considerably more straight forward. </p>\n<h3 id=\"vue-js\"><a href=\"#vue-js\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vue JS</h3>\n<p><a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://vuejs.org/</a></p>\n<p>Vue.js is a javascript framework, used mostly for building single page applications. Gridsome sits on top of Vue.js, and instead of building into a single page application, it generates the html for each page. </p>\n<h3 id=\"html5upnet--pixelarity\"><a href=\"#html5upnet--pixelarity\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HTML5up.net / Pixelarity</h3>\n<p><a href=\"https://html5up.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://html5up.net/</a> / <a href=\"pixelarity.com\">https://pixelarity.com/</a></p>\n<p>HTML5up and Pixelarity provide the same beautiful html/css layouts - one on a free license and one on a subscription basis without the free license requirements attached. </p>\n<p>What I love about these templates, aside from how great they look, is that there's very little javascript in the templates. This makes them very easy to pop into a <code>vue/react</code> etc project. </p>\n<h3 id=\"svg-background-from-httpswwwsvgbackgroundscom\"><a href=\"#svg-background-from-httpswwwsvgbackgroundscom\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SVG Background from <a href=\"https://www.svgbackgrounds.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.svgbackgrounds.com/</a></h3>\n<p><a href=\"https://www.svgbackgrounds.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.svgbackgrounds.com/</a></p>\n<p>My background is generated on svgbackgrounds.com, which has a fun and easy to use interface to generate fun custom backgrounds. The format is in SVG, which the browser natively compiles, so you end up with a code string to plug in as your background image, instead of an image file. </p>\n<p>Their backgrounds are free, as long as you mention them on the site you on which you use it. There is also a premium plan, for premium backgrounds. </p>\n<h2 id=\"hosting-and-deployment--\"><a href=\"#hosting-and-deployment--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hosting and Deployment -</h2>\n<h3 id=\"github\"><a href=\"#github\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Github</h3>\n<p><a href=\"https://www.github.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.github.com/</a></p>\n<p>Github is the world most popular place to store and collaborate on code. I won't go too deep into Github, but it allows me to save my code remotely, as well as provide other applications access to it. </p>\n<h3 id=\"netlify\"><a href=\"#netlify\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Netlify</h3>\n<p><a href=\"https://www.netlify.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.netlify.com/</a></p>\n<p>Netlify is a wonderful magical service that builds and deploys code for you, for free. You give it permissions to your Github account and a branch of a specific repo , and it rebuilds your website every time your that branch has new code. By default it deploys to a unique_nonsense_string.netlify.com, but you can update the unique_nonsense_string to something more suitable. For example, this site is hosted at\nnatespilmandotcom.netlify.com, with the DNS settings set to natespilman.com. </p>\n<h3 id=\"namecheap\"><a href=\"#namecheap\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Namecheap</h3>\n<p><a href=\"https://www.namecheap.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.namecheap.com/</a>\nNamecheap is the domain provider through which I manage and purchase my domains. </p>\n<h2 id=\"content-management\"><a href=\"#content-management\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Content Management</h2>\n<h3 id=\"netlify-cms\"><a href=\"#netlify-cms\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Netlify CMS</h3>\n<p><a href=\"https://gridsome.org/docs/guide-netlify-cms/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gridsome.org/docs/guide-netlify-cms/</a></p>\n<p>Netlify CMS is a user friendly admin UI for creating new posts! I'm using it right now to write this. It's an open source gridsome plugin that you grant access to your github repo, and it commits new markdown files to your github repo on publish. </p>\n"}},{"node":{"title":"Playing chords with Mido and Python","path":"/blog/playing-chords-with-mido-and-python/","description":"Playing something that actually sounds musical","tags":[{"title":"python"},{"title":"music"},{"title":"midi"},{"title":"mido"},{"title":"software"}],"date":"24. March 2020","content":"<p>Welcome back. This is part II of my python midi series. Part I can be found <a href=\"https://natespilman.com/blog/2020-03-23-generating-midi-music-stream-with-python/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here.</a></p>\n<p>Last time we set up our python program to successfully send a midi stream to our midi player. </p>\n<p>Today we're going to loop a basic chord progression, and add some texture. Again, my midi player is Ableton Live, but this will work for anything that takes midi input. </p>\n<hr>\n<h3 id=\"writing-chords--\"><a href=\"#writing-chords--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Writing Chords -</h3>\n<p>We're going to start with some basic minor and major triads - the root, the third and the fifth. The major third is 2 whole steps up from the root - 4 steps - and the minor third is a whole and a half step up from the root - 3 steps. </p>\n<p>First, our function setup - </p>\n<pre><code class=\"language-python\">import mido\nfrom time import sleep\n \ndef note(note,velocity = 64, time = 2):\n    return mido.Message('note_on',note=note,velocity = velocity, time=time)\n\ndef note_off(note,velocity = 64, time=2):\n    return mido.Message('note_off',note=note,velocity = velocity, time=time)\n\noutport = mido.open_output('IAC Driver pioneer')\n\ndef majorChord(root, duration):\n    outport.send(note(root))\n    outport.send(note(root+4))\n    outport.send(note(root+7))\n    sleep(duration)\n    outport.send(note_off(root))\n    outport.send(note_off(root+4))\n    outport.send(note_off(root+7))\n\ndef minorChord(root ,duration):\n    outport.send(note(root))\n    outport.send(note(root+3))\n    outport.send(note(root+7))\n    sleep(duration)\n    outport.send(note_off(root))\n    outport.send(note_off(root+3))\n    outport.send(note_off(root+7))\n</code></pre>\n<p>The <code>note</code> method returns a mido.Message object that is sent to the port. </p>\n<p>The <code>majorChord</code> and <code>minorChord</code> functions take in their root note, but also a duration argument. These functions play the chord, sleep for the duration, and then turn off the notes by triggering 'note_off' messages. </p>\n<p>With this, we can loop a nice chord progression like so - </p>\n<pre><code class=\"language-python\">C = 60 \nG = 55 \nA = 57 \nF = 53 \n\nwhile True:\n    majorChord(C,1)\n    majorChord(G,1)\n    minorChord(A,1)\n    majorChord(F,1)\n    majorChord(F,1)\n    majorChord(G,1)\n    majorChord(C,2)\n</code></pre>\n<p>Tada! we have a chord progression! It sounds a bit dull, though, so let's add some texture. </p>\n<iframe width=\"75%\" height=\"265\" src=\"https://clyp.it/2dtqyn41/widget\" frameborder=\"0\"></iframe>\n<hr>\n<h3 id=\"adding-texture--\"><a href=\"#adding-texture--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Adding Texture -</h3>\n<p>We're going to make two changes to make this progression sound less robotic. First, in our note generation, we've added a velocity modification variable. With every note generated, the velocity is now anywhere, randomly, between 44 and 84. This changes the intensity of the note. </p>\n<p>In addition, we've added a <code>pause</code> function, which inserts of <code>sleep</code> of anywhere between 0 and .05 seconds. We've added this pause between the  individual notes on the chord, everyso slightly staggering the notes. </p>\n<pre><code class=\"language-python\">def note(note,velocity = 64, time = 2):\n    velocity_modification = randint(-20,20)\n    return mido.Message('note_on',note=note,velocity = velocity + velocity_modification, time=time)\n\ndef note_off(note,velocity = 64, time=2):\n    return mido.Message('note_off',note=note,velocity = velocity, time=time)\n\ndef pause():\n    sleep(randint(0,100) * .0005)\n\ndef majorChord(root ,duration):\n    outport.send(note(root))\n    pause()\n    outport.send(note(root+4))\n    pause()\n    outport.send(note(root+7))\n    pause()\n    sleep(duration)\n    outport.send(note_off(root))\n    outport.send(note_off(root+4))\n    outport.send(note_off(root+7))\n\ndef minorChord(root ,duration):\n    outport.send(note(root))\n    pause()\n    outport.send(note(root+3))\n    pause()\n    outport.send(note(root+7))\n    sleep(duration) \n    outport.send(note_off(root))\n    outport.send(note_off(root+4))\n    outport.send(note_off(root+7))\n</code></pre>\n<p>And here is the output. </p>\n<iframe width=\"75%\" height=\"265\" src=\"https://clyp.it/g54lv0zg/widget\" frameborder=\"0\"></iframe>\n<p>You can hear how much more organic it sounds. Each loop is unique in its velocity and stagger values. </p>\n<p>Thanks for reading. Stay tuned for more python midi projects!</p>\n"}},{"node":{"title":"Generating a midi music stream with Python","path":"/blog/2020-03-23-generating-midi-music-stream-with-python/","description":"using python package Mido to send midi information to midi player - an introduction","tags":[{"title":"python"},{"title":"music"},{"title":"midi"},{"title":"mido"},{"title":"software"}],"date":"21. March 2020","content":"<p><em>instructions originally sourced from <a href=\"https://www.reddit.com/r/ableton/comments/5tuihk/any_good_resources_on_python_to_ableton/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this fine reddit post</a></em></p>\n<h3 id=\"getting-started\"><a href=\"#getting-started\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Getting Started</h3>\n<p>Today, we will be installing <code>Mido</code>, a python midi package. We'll then open a new audio port (will show the ios instructions), and output our midi stream to that port. I'm using Ableton Live 10 Intro as my program to consume the midi stream, but any application that takes in external midi will do.</p>\n<p>first off, if you don't have python install on your machine, you can get it <a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.\\\nThen, install <code>mido</code> via <code>pip install mido</code>. Full <code>mido</code> documentation <a href=\"https://mido.readthedocs.io/en/latest/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<hr>\n<h3 id=\"design\"><a href=\"#design\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Design</h3>\n<p>The final workflow will be as follows - </p>\n<ol>\n<li>Our midi player will be listening to our newly created midi port. </li>\n<li>Our python script will attach itself to our newly created midi port and send midi information to it. </li>\n<li>Our midi player will play the midi sent from our file. </li>\n</ol>\n<p>The first thing we must do is create our midi port. </p>\n<hr>\n<h3 id=\"creating-a-new-midi-port\"><a href=\"#creating-a-new-midi-port\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Creating a new midi port</h3>\n<p><em>we will be going over the steps for mac. <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/audio/midi-port-driver\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Here</a> are the official docs for windows.</em></p>\n<ol>\n<li>On Mac OS, navigate to <code>Midi Audio Setup</code>. </li>\n<li>double click on IAC Driver</li>\n<li>On the window that pops up, click \"ports\". </li>\n<li>There will probably already be a port named \"Bus 1\". Create a new port, or rename the current one. I named mine \"pioneer.\"</li>\n</ol>\n<p><img src=\"/uploads/1pythonmidi_iacdriverports.png\" alt=\"IAC Driver ports\" title=\"IAC Driver ports\"></p>\n<hr>\n<h3 id=\"point-your-midi-player-to-your-new-port\"><a href=\"#point-your-midi-player-to-your-new-port\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Point your midi player to your new port</h3>\n<p>This next step is different based on which midi player you use. The following screenshot is from Ableton Live 10 Intro.    </p>\n<p><img src=\"/uploads/1pythonmidi_abletonmidiport.png\" alt=\"Ableton - point your midi track at your IAC driver port\" title=\"Ableton - point your midi track at your IAC driver port\"></p>\n<hr>\n<h3 id=\"write-your-python-code\"><a href=\"#write-your-python-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Write your python code</h3>\n<p>Below is some sample code that will play send your midi player a middle C, which is represented with the integer 60. Musical notes are represented with the values 1 through 127. When you run the following code, it will play once. </p>\n<pre><code class=\"language-python\">import mido\n\nmiddleC = 60\nmsg = mido.Message('note_on', note=middleC, velocity=64)\noutport = mido.open_output('IAC Driver pioneer')\noutport.send(msg)\n</code></pre>\n<iframe width=\"80%\" height=\"`00\" src=\"https://clyp.it/wpdhjpc4/widget\" frameborder=\"0\"></iframe>\n<p>To demonstrate what I mean, I modified the above code to play continuously, pausing for .5 seconds every after every play. </p>\n<pre><code>import mido\nfrom time import sleep\n\nmiddleC = 60\nwhile True:\n    msg = mido.Message('note_on', note=middleC, velocity=64)\n    outport = mido.open_output('IAC Driver pioneer')\n    outport.send(msg)\n    sleep(.5)\n</code></pre>\n<p><img src=\"/uploads/1pythonmidi_repeatingnote.gif\" alt=\"midi note looping\" title=\"midi note looping\"></p>\n<hr>\n<h3 id=\"in-conclusion\"><a href=\"#in-conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>In conclusion</h3>\n<p>You can now send midi messages to your midi player from Python as it if were a midi controller! </p>\n<p>We'll build cooler stuff with this in blogposts to come. </p>\n<p>See you next time!</p>\n"}}]}},"allTag":{"edges":[{"node":{"id":"beer","path":"/tags/beer/"}},{"node":{"id":"Notes","path":"/tags/Notes/"}},{"node":{"id":"vue.js","path":"/tags/vue.js/"}},{"node":{"id":"namecheap","path":"/tags/namecheap/"}},{"node":{"id":"netlifycms","path":"/tags/netlifycms/"}},{"node":{"id":"Netlify","path":"/tags/Netlify/"}},{"node":{"id":"meta","path":"/tags/meta/"}},{"node":{"id":"javascript","path":"/tags/javascript/"}},{"node":{"id":"CHOP","path":"/tags/CHOP/"}},{"node":{"id":"protest","path":"/tags/protest/"}},{"node":{"id":"BLM","path":"/tags/BLM/"}},{"node":{"id":"seattle","path":"/tags/seattle/"}},{"node":{"id":"test","path":"/tags/test/"}},{"node":{"id":"a multi-word tag","path":"/tags/a%20multi-word%20tag/"}},{"node":{"id":"singlewordtag","path":"/tags/singlewordtag/"}},{"node":{"id":"Everyone Plays the Same Song","path":"/tags/Everyone%20Plays%20the%20Same%20Song/"}},{"node":{"id":"Google Sheets","path":"/tags/Google%20Sheets/"}},{"node":{"id":"Google Forms","path":"/tags/Google%20Forms/"}},{"node":{"id":"education","path":"/tags/education/"}},{"node":{"id":"pillow","path":"/tags/pillow/"}},{"node":{"id":"data science","path":"/tags/data%20science/"}},{"node":{"id":"histogram","path":"/tags/histogram/"}},{"node":{"id":"matplotlib","path":"/tags/matplotlib/"}},{"node":{"id":"update","path":"/tags/update/"}},{"node":{"id":"misc","path":"/tags/misc/"}},{"node":{"id":"twitter","path":"/tags/twitter/"}},{"node":{"id":"guitar","path":"/tags/guitar/"}},{"node":{"id":"everyone plays the same song","path":"/tags/everyone%20plays%20the%20same%20song/"}},{"node":{"id":"organizing","path":"/tags/organizing/"}},{"node":{"id":"projects","path":"/tags/projects/"}},{"node":{"id":"creative","path":"/tags/creative/"}},{"node":{"id":"covers","path":"/tags/covers/"}},{"node":{"id":"career","path":"/tags/career/"}},{"node":{"id":"tech","path":"/tags/tech/"}},{"node":{"id":"software","path":"/tags/software/"}},{"node":{"id":"mido","path":"/tags/mido/"}},{"node":{"id":"midi","path":"/tags/midi/"}},{"node":{"id":"music","path":"/tags/music/"}},{"node":{"id":"python","path":"/tags/python/"}},{"node":{"id":"building the blog","path":"/tags/building%20the%20blog/"}},{"node":{"id":"graphql","path":"/tags/graphql/"}},{"node":{"id":"Gridsome","path":"/tags/Gridsome/"}},{"node":{"id":"Software","path":"/tags/Software/"}},{"node":{"id":"Meta","path":"/tags/Meta/"}}]}},"context":{}}