{"hash":"1acd9ff7544f5ebc679a6336555ee451878b9c4a","data":{"tag":{"title":"python","belongsTo":{"edges":[{"node":{"title":"JPG Light Value Analysis with Python, PIL and MatPlotLib","path":"/blog/making-a-histogram-image-light-with-matplotlib/","description":"Building a Histogram to analyze the light values of an image","tags":[{"title":"python"},{"title":"matplotlib"},{"title":"histogram"},{"title":"data science"},{"title":"pillow"},{"title":"software"}],"date":"1. April 2020","content":"<p><em>All images used in this post are from the amazing <a href=\"Unsplash.com\">Unsplash.com</a></em></p>\n<h2 id=\"introduction\"><a href=\"#introduction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Introduction</h2>\n<p>We'll be making a histogram using <code>matplotlib</code> to display light distribution of pixel count in JPG images. Each pixel has an RGB value(red, green, blue) ranging 0 to 255, with the light value representing the sum of those values. <code>(0,0,0)</code> is black - zero light, and <code>(255,255,255)</code> is white - full light. Our <code>x</code> axis range will be 0 to 765. </p>\n<p>For example -  The light distribution of the this image ...</p>\n<p><br><img src=\"https://images.unsplash.com/photo-1583364481915-dacea3e06d18?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=600&#x26;q=80\" alt=\"alt text\" title=\"Example Image for Light Distribution\"></p>\n<p>is this - </p>\n<p><img src=\"/uploads/3lightdistroimages_introexample.png\"></p>\n<p>We can see a large distribution of dark pixels than light ones. </p>\n<p>Why are we doing this? Because we can! While I don't have a ton of specific use cases for this, being able to use data to answer questions is important. Our initial question is \"What is the light distribution of this image?\" </p>\n<h2 id=\"what-well-be-doing\"><a href=\"#what-well-be-doing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What we'll be doing?</h2>\n<p>All of the following steps are in Python.  </p>\n<ol>\n<li>Use <code>PIL</code> to load an image into memory. </li>\n<li>Shrink the image down to a pixel size we can more easily view. </li>\n<li>Use <code>numpy</code> to convert our image into an array. Flatten the 3d array into a 2d array of the RGB values. </li>\n<li>Convert the pixel array into an array of the pixel light values - the sun of the rgb values.  </li>\n<li>Use <code>matplotlib</code> to generate the histogram. </li>\n</ol>\n<p>Let's get started! </p>\n<hr>\n<h2 id=\"use-pil-to-load-an-image-into-memory\"><a href=\"#use-pil-to-load-an-image-into-memory\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Use PIL to load an image into memory.</h2>\n<p>PIL is an absolutely magical package for image processing.  I created the <code>getImageFromUrl(url)</code> method that takes in a url, uses python's <code>requests</code> package to make the https request, and then load the image. We need to pass the response content into BytesIO to read the requests content into a format that PIL can consume and convert into an Image object. </p>\n<p>By the end of this code, we have an image from the internet in memory as a PIL.Image object. </p>\n<pre><code class=\"language-python\">from PIL import Image\nimport requests\n\ndef getImageFromUrl(url):\n    response = requests.get(url)\n    return Image.open(BytesIO(response.content))\n\nimageUrl = \"https://images.unsplash.com/photo-1583364481915-dacea3e06d18?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=600&#x26;q=80\"\n\nimage = getImageFromUrl(imageUrl)\n</code></pre>\n<hr>\n<h2 id=\"shrink-the-image-down-to-a-pixel-size-we-can-more-easily-view\"><a href=\"#shrink-the-image-down-to-a-pixel-size-we-can-more-easily-view\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Shrink the image down to a pixel size we can more easily view.</h2>\n<p>I created a helper method to resize the image file so that it's largest side is a pixel count we pass in. This is to keep pixel count low enough to analyze quickly and in a controlled way. By the end of this block, we have a resized image with 150 pixels as the largest side, and the aspect ratio remaining the same. </p>\n<pre><code class=\"language-python\">def resize_setLargestSide(image,maxSide):\n    width,height = image.size\n    widthRatio = width / (width + height)\n    heightRatio = height / (width + height)\n    if width > height:\n        newWidth = maxSide\n        widthPlusHeight = newWidth / widthRatio\n        newHeight = widthPlusHeight - newWidth\n    else:\n        newHeight = maxSide\n        widthPlusHeight = newHeight / heightRatio\n        newWidth = widthPlusHeight - newHeight\n    return image.resize((int(newWidth),int(newHeight)))\n\nnewImage = resize_setLargestSide(image,150)\n</code></pre>\n<hr>\n<h2 id=\"use-numpy-to-convert-our-image-into-an-array-flatten-the-3d-array-into-a-2d-array-of-the-rgb-values\"><a href=\"#use-numpy-to-convert-our-image-into-an-array-flatten-the-3d-array-into-a-2d-array-of-the-rgb-values\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Use <code>numpy</code> to convert our image into an array. Flatten the 3d array into a 2d array of the RGB values.</h2>\n<p>the <code>np.array</code> method converts a PIL.Image object to a 3d np array - height by width by pixels (r,g,b). numpy arrays have the property <code>shape</code>, which in the case below returns the width, height, and 3, which is the length of the pixel. I create <code>flattenedShape</code> which will be used to convert the 3d array into a 2d array by multiplying the length by width, which is then passed into <code>reshape()</code>, a method that lives on the np array.</p>\n<p><code>reshape()</code> only works if the number of values remains the same, so had  I not multiplied width by height, <code>reshape()</code> would have failed. </p>\n<pre><code class=\"language-python\">import numpy as np\n\nimageArray = np.array(newImage)\nshape = imageArray.shape\nflattenedShape = (shape[0] * shape[1],shape[2])\nreshapedImage = imageArray.reshape(flattenedShape)\n</code></pre>\n<hr>\n<h2 id=\"convert-the-pixel-array-into-an-array-of-the-pixel-light-values---the-sun-of-the-rgb-values\"><a href=\"#convert-the-pixel-array-into-an-array-of-the-pixel-light-values---the-sun-of-the-rgb-values\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Convert the pixel array into an array of the pixel light values - the sun of the rgb values.</h2>\n<p>Boy do I love <a href=\"https://www.pythonforbeginners.com/basics/list-comprehensions-in-python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">list comprehensions.</a> Below takes the 2d array and converts it to a 1 dimensional array of pixel light values, by summing the 3 values of the pixel.  At this point, we have our data ready to graph!</p>\n<pre><code class=\"language-python\">lightValues = [sum(pixel) for pixel in reshapedImage]\n</code></pre>\n<hr>\n<h2 id=\"use-matplotlib-to-generate-the-histogram\"><a href=\"#use-matplotlib-to-generate-the-histogram\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Use <code>matplotlib</code> to generate the histogram.</h2>\n<p>And now, we graph! </p>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\n\nplt.hist(lightValues, bins=20, facecolor = 'blue')\nplt.ylabel(\"Amount of Light\")\nplt.xlabel(\"Pixel Concentration\")\nplt.title('Light Values')\nplt.axis([0,775,0,4000])\nplt.show()\n</code></pre>\n<h2 id=\"full-code\"><a href=\"#full-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Full Code</h2>\n<pre><code class=\"language-python\">from PIL import Image\nfrom io import BytesIO\nimport requests\n\ndef getImageFromUrl(url):\n    response = requests.get(url)\n    return Image.open(BytesIO(response.content))\n\nimageUrl = \"https://images.unsplash.com/photo-1583364481915-dacea3e06d18?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=600&#x26;q=80\"\n\nimage = getImageFromUrl(imageUrl)\n\ndef resize_setLargestSide(image,maxSide):\n    width,height = image.size\n    widthRatio = width / (width + height)\n    heightRatio = height / (width + height)\n    if width > height:\n        newWidth = maxSide\n        widthPlusHeight = newWidth / widthRatio\n        newHeight = widthPlusHeight - newWidth\n    else:\n        newHeight = maxSide\n        widthPlusHeight = newHeight / heightRatio\n        newWidth = widthPlusHeight - newHeight\n    return image.resize((int(newWidth),int(newHeight)))\n\nnewImage = resize_setLargestSide(image,150)\n\nimport numpy as np\n\nimageArray = np.array(newImage)\nshape = imageArray.shape\nflattenedShape = (shape[0] * shape[1],shape[2])\nreshapedImage = imageArray.reshape(flattenedShape)\n\nlightValues = [sum(pixel) for pixel in reshapedImage]\n\nimport matplotlib.pyplot as plt\n\nplt.hist(lightValues, bins=20, facecolor = 'blue')\nplt.ylabel(\"Amount of Light\")\nplt.xlabel(\"Pixel Concentration\")\nplt.title('Light Values')\nplt.axis([0,775,0,4000])\nplt.show()\n</code></pre>\n<h2 id=\"example-outputs\"><a href=\"#example-outputs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Example Outputs</h2>\n<h4 id=\"input\"><a href=\"#input\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>input</h4>\n<p><img src=\"https://images.unsplash.com/photo-1514729077270-37608dea7d7d?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=600&#x26;q=80\" alt=\"High Contrast - Dark and Light\" title=\"High Contrast - Dark and Light\"></p>\n<h4 id=\"output\"><a href=\"#output\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>output</h4>\n<p><img src=\"/uploads/3lightdistroimages_darkimage.png\" alt=\"Dark Image light distribution\" title=\"Dark Image light distribution\"></p>\n<hr>\n<h4 id=\"input-1\"><a href=\"#input-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>input</h4>\n<p><img src=\"https://images.unsplash.com/photo-1516649195228-a023c093df99?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=600&#x26;q=80\" alt=\"More Neutral Image\" title=\"More Neutral Image\"></p>\n<h4 id=\"output-1\"><a href=\"#output-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>output</h4>\n<p><img src=\"/uploads/3lightdistroimages_neutralimage.png\" alt=\"Dark Image neutral distribution\" title=\"Dark Image neutral distribution\"></p>\n<hr>\n<h4 id=\"input-2\"><a href=\"#input-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>input</h4>\n<p><img src=\"https://images.unsplash.com/photo-1538935516496-9972a989f715?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=600&#x26;q=80\" alt=\"Bright Image\" title=\"Bright Image\"></p>\n<h4 id=\"output-2\"><a href=\"#output-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>output</h4>\n<p><img src=\"/uploads/3lightdistroimages_lightimage.png\" alt=\"Dark Image light distribution\" title=\"Dark Image light distribution\"></p>\n"}},{"node":{"title":"Playing chords with Mido and Python","path":"/blog/playing-chords-with-mido-and-python/","description":"Playing something that actually sounds musical","tags":[{"title":"python"},{"title":"music"},{"title":"midi"},{"title":"mido"},{"title":"software"}],"date":"24. March 2020","content":"<p>Welcome back. This is part II of my python midi series. Part I can be found <a href=\"https://natespilman.com/blog/2020-03-23-generating-midi-music-stream-with-python/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here.</a></p>\n<p>Last time we set up our python program to successfully send a midi stream to our midi player. </p>\n<p>Today we're going to loop a basic chord progression, and add some texture. Again, my midi player is Ableton Live, but this will work for anything that takes midi input. </p>\n<hr>\n<h3 id=\"writing-chords--\"><a href=\"#writing-chords--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Writing Chords -</h3>\n<p>We're going to start with some basic minor and major triads - the root, the third and the fifth. The major third is 2 whole steps up from the root - 4 steps - and the minor third is a whole and a half step up from the root - 3 steps. </p>\n<p>First, our function setup - </p>\n<pre><code class=\"language-python\">import mido\nfrom time import sleep\n \ndef note(note,velocity = 64, time = 2):\n    return mido.Message('note_on',note=note,velocity = velocity, time=time)\n\ndef note_off(note,velocity = 64, time=2):\n    return mido.Message('note_off',note=note,velocity = velocity, time=time)\n\noutport = mido.open_output('IAC Driver pioneer')\n\ndef majorChord(root, duration):\n    outport.send(note(root))\n    outport.send(note(root+4))\n    outport.send(note(root+7))\n    sleep(duration)\n    outport.send(note_off(root))\n    outport.send(note_off(root+4))\n    outport.send(note_off(root+7))\n\ndef minorChord(root ,duration):\n    outport.send(note(root))\n    outport.send(note(root+3))\n    outport.send(note(root+7))\n    sleep(duration)\n    outport.send(note_off(root))\n    outport.send(note_off(root+3))\n    outport.send(note_off(root+7))\n</code></pre>\n<p>The <code>note</code> method returns a mido.Message object that is sent to the port. </p>\n<p>The <code>majorChord</code> and <code>minorChord</code> functions take in their root note, but also a duration argument. These functions play the chord, sleep for the duration, and then turn off the notes by triggering 'note_off' messages. </p>\n<p>With this, we can loop a nice chord progression like so - </p>\n<pre><code class=\"language-python\">C = 60 \nG = 55 \nA = 57 \nF = 53 \n\nwhile True:\n    majorChord(C,1)\n    majorChord(G,1)\n    minorChord(A,1)\n    majorChord(F,1)\n    majorChord(F,1)\n    majorChord(G,1)\n    majorChord(C,2)\n</code></pre>\n<p>Tada! we have a chord progression! It sounds a bit dull, though, so let's add some texture. </p>\n<iframe width=\"75%\" height=\"265\" src=\"https://clyp.it/2dtqyn41/widget\" frameborder=\"0\"></iframe>\n<hr>\n<h3 id=\"adding-texture--\"><a href=\"#adding-texture--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Adding Texture -</h3>\n<p>We're going to make two changes to make this progression sound less robotic. First, in our note generation, we've added a velocity modification variable. With every note generated, the velocity is now anywhere, randomly, between 44 and 84. This changes the intensity of the note. </p>\n<p>In addition, we've added a <code>pause</code> function, which inserts of <code>sleep</code> of anywhere between 0 and .05 seconds. We've added this pause between the  individual notes on the chord, everyso slightly staggering the notes. </p>\n<pre><code class=\"language-python\">def note(note,velocity = 64, time = 2):\n    velocity_modification = randint(-20,20)\n    return mido.Message('note_on',note=note,velocity = velocity + velocity_modification, time=time)\n\ndef note_off(note,velocity = 64, time=2):\n    return mido.Message('note_off',note=note,velocity = velocity, time=time)\n\ndef pause():\n    sleep(randint(0,100) * .0005)\n\ndef majorChord(root ,duration):\n    outport.send(note(root))\n    pause()\n    outport.send(note(root+4))\n    pause()\n    outport.send(note(root+7))\n    pause()\n    sleep(duration)\n    outport.send(note_off(root))\n    outport.send(note_off(root+4))\n    outport.send(note_off(root+7))\n\ndef minorChord(root ,duration):\n    outport.send(note(root))\n    pause()\n    outport.send(note(root+3))\n    pause()\n    outport.send(note(root+7))\n    sleep(duration) \n    outport.send(note_off(root))\n    outport.send(note_off(root+4))\n    outport.send(note_off(root+7))\n</code></pre>\n<p>And here is the output. </p>\n<iframe width=\"75%\" height=\"265\" src=\"https://clyp.it/g54lv0zg/widget\" frameborder=\"0\"></iframe>\n<p>You can hear how much more organic it sounds. Each loop is unique in its velocity and stagger values. </p>\n<p>Thanks for reading. Stay tuned for more python midi projects!</p>\n"}},{"node":{"title":"Generating a midi music stream with Python","path":"/blog/2020-03-23-generating-midi-music-stream-with-python/","description":"using python package Mido to send midi information to midi player - an introduction","tags":[{"title":"python"},{"title":"music"},{"title":"midi"},{"title":"mido"},{"title":"software"}],"date":"21. March 2020","content":"<p><em>instructions originally sourced from <a href=\"https://www.reddit.com/r/ableton/comments/5tuihk/any_good_resources_on_python_to_ableton/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this fine reddit post</a></em></p>\n<h3 id=\"getting-started\"><a href=\"#getting-started\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Getting Started</h3>\n<p>Today, we will be installing <code>Mido</code>, a python midi package. We'll then open a new audio port (will show the ios instructions), and output our midi stream to that port. I'm using Ableton Live 10 Intro as my program to consume the midi stream, but any application that takes in external midi will do.</p>\n<p>first off, if you don't have python install on your machine, you can get it <a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.\\\nThen, install <code>mido</code> via <code>pip install mido</code>. Full <code>mido</code> documentation <a href=\"https://mido.readthedocs.io/en/latest/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<hr>\n<h3 id=\"design\"><a href=\"#design\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Design</h3>\n<p>The final workflow will be as follows - </p>\n<ol>\n<li>Our midi player will be listening to our newly created midi port. </li>\n<li>Our python script will attach itself to our newly created midi port and send midi information to it. </li>\n<li>Our midi player will play the midi sent from our file. </li>\n</ol>\n<p>The first thing we must do is create our midi port. </p>\n<hr>\n<h3 id=\"creating-a-new-midi-port\"><a href=\"#creating-a-new-midi-port\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Creating a new midi port</h3>\n<p><em>we will be going over the steps for mac. <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/audio/midi-port-driver\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Here</a> are the official docs for windows.</em></p>\n<ol>\n<li>On Mac OS, navigate to <code>Midi Audio Setup</code>. </li>\n<li>double click on IAC Driver</li>\n<li>On the window that pops up, click \"ports\". </li>\n<li>There will probably already be a port named \"Bus 1\". Create a new port, or rename the current one. I named mine \"pioneer.\"</li>\n</ol>\n<p><img src=\"/uploads/1pythonmidi_iacdriverports.png\" alt=\"IAC Driver ports\" title=\"IAC Driver ports\"></p>\n<hr>\n<h3 id=\"point-your-midi-player-to-your-new-port\"><a href=\"#point-your-midi-player-to-your-new-port\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Point your midi player to your new port</h3>\n<p>This next step is different based on which midi player you use. The following screenshot is from Ableton Live 10 Intro.    </p>\n<p><img src=\"/uploads/1pythonmidi_abletonmidiport.png\" alt=\"Ableton - point your midi track at your IAC driver port\" title=\"Ableton - point your midi track at your IAC driver port\"></p>\n<hr>\n<h3 id=\"write-your-python-code\"><a href=\"#write-your-python-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Write your python code</h3>\n<p>Below is some sample code that will play send your midi player a middle C, which is represented with the integer 60. Musical notes are represented with the values 1 through 127. When you run the following code, it will play once. </p>\n<pre><code class=\"language-python\">import mido\n\nmiddleC = 60\nmsg = mido.Message('note_on', note=middleC, velocity=64)\noutport = mido.open_output('IAC Driver pioneer')\noutport.send(msg)\n</code></pre>\n<iframe width=\"80%\" height=\"`00\" src=\"https://clyp.it/wpdhjpc4/widget\" frameborder=\"0\"></iframe>\n<p>To demonstrate what I mean, I modified the above code to play continuously, pausing for .5 seconds every after every play. </p>\n<pre><code>import mido\nfrom time import sleep\n\nmiddleC = 60\nwhile True:\n    msg = mido.Message('note_on', note=middleC, velocity=64)\n    outport = mido.open_output('IAC Driver pioneer')\n    outport.send(msg)\n    sleep(.5)\n</code></pre>\n<p><img src=\"/uploads/1pythonmidi_repeatingnote.gif\" alt=\"midi note looping\" title=\"midi note looping\"></p>\n<hr>\n<h3 id=\"in-conclusion\"><a href=\"#in-conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>In conclusion</h3>\n<p>You can now send midi messages to your midi player from Python as it if were a midi controller! </p>\n<p>We'll build cooler stuff with this in blogposts to come. </p>\n<p>See you next time!</p>\n"}}]}},"allTag":{"edges":[{"node":{"id":"beer","path":"/tags/beer/"}},{"node":{"id":"Notes","path":"/tags/Notes/"}},{"node":{"id":"vue.js","path":"/tags/vue.js/"}},{"node":{"id":"namecheap","path":"/tags/namecheap/"}},{"node":{"id":"netlifycms","path":"/tags/netlifycms/"}},{"node":{"id":"Netlify","path":"/tags/Netlify/"}},{"node":{"id":"meta","path":"/tags/meta/"}},{"node":{"id":"javascript","path":"/tags/javascript/"}},{"node":{"id":"CHOP","path":"/tags/CHOP/"}},{"node":{"id":"protest","path":"/tags/protest/"}},{"node":{"id":"BLM","path":"/tags/BLM/"}},{"node":{"id":"seattle","path":"/tags/seattle/"}},{"node":{"id":"test","path":"/tags/test/"}},{"node":{"id":"a multi-word tag","path":"/tags/a%20multi-word%20tag/"}},{"node":{"id":"singlewordtag","path":"/tags/singlewordtag/"}},{"node":{"id":"Everyone Plays the Same Song","path":"/tags/Everyone%20Plays%20the%20Same%20Song/"}},{"node":{"id":"Google Sheets","path":"/tags/Google%20Sheets/"}},{"node":{"id":"Google Forms","path":"/tags/Google%20Forms/"}},{"node":{"id":"education","path":"/tags/education/"}},{"node":{"id":"pillow","path":"/tags/pillow/"}},{"node":{"id":"data science","path":"/tags/data%20science/"}},{"node":{"id":"histogram","path":"/tags/histogram/"}},{"node":{"id":"matplotlib","path":"/tags/matplotlib/"}},{"node":{"id":"update","path":"/tags/update/"}},{"node":{"id":"misc","path":"/tags/misc/"}},{"node":{"id":"twitter","path":"/tags/twitter/"}},{"node":{"id":"guitar","path":"/tags/guitar/"}},{"node":{"id":"everyone plays the same song","path":"/tags/everyone%20plays%20the%20same%20song/"}},{"node":{"id":"organizing","path":"/tags/organizing/"}},{"node":{"id":"projects","path":"/tags/projects/"}},{"node":{"id":"creative","path":"/tags/creative/"}},{"node":{"id":"covers","path":"/tags/covers/"}},{"node":{"id":"career","path":"/tags/career/"}},{"node":{"id":"tech","path":"/tags/tech/"}},{"node":{"id":"software","path":"/tags/software/"}},{"node":{"id":"mido","path":"/tags/mido/"}},{"node":{"id":"midi","path":"/tags/midi/"}},{"node":{"id":"music","path":"/tags/music/"}},{"node":{"id":"python","path":"/tags/python/"}},{"node":{"id":"building the blog","path":"/tags/building%20the%20blog/"}},{"node":{"id":"graphql","path":"/tags/graphql/"}},{"node":{"id":"Gridsome","path":"/tags/Gridsome/"}},{"node":{"id":"Software","path":"/tags/Software/"}},{"node":{"id":"Meta","path":"/tags/Meta/"}}]}},"context":{}}