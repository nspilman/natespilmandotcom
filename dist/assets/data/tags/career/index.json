{"hash":"1acd9ff7544f5ebc679a6336555ee451878b9c4a","data":{"tag":{"title":"career","belongsTo":{"edges":[{"node":{"title":"How to Organize a Creative Project, Remotely","path":"/blog/how-to-organize-a-creative-project-remotely/","description":"How 'Everyone Plays the Same Song' works","tags":[{"title":"music"},{"title":"creative"},{"title":"career"},{"title":"projects"},{"title":"organizing"},{"title":"everyone plays the same song"}],"date":"14. July 2020","content":"<p>Around the \"Oh, this is going to be a while\" realization portion of Quaratimes, I began organizing a cover project called Everyone Plays the Same Song, in which all musicians participating record their interpretation of the same song. It has been a rewarding project, and in this post I want to distill down the basics of how it's done, and how you can replicate it. I'll go over the tenets, tools and actual implementation steps of the project itself. </p>\n<p>If you're interested in learning more about the project itself or listening to the covers, <a href=\"https://natespilman.com/blog/everyone-plays-the-same-song/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here is its official page. </a> We've had two rounds at the time of this writing, and Signups for round 3 are open. </p>\n<h3 id=\"the-structure-and-tools-that-make-everyone-plays-the-same-song-work--\"><a href=\"#the-structure-and-tools-that-make-everyone-plays-the-same-song-work--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The structure and tools that make Everyone Plays the Same Song work -</h3>\n<h4 id=\"tenets--\"><a href=\"#tenets--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tenets -</h4>\n<ol>\n<li>Understand what a finished round or project looks like, and set deadlines. No matter how arbitrary, everyone needs to know when something begins and when something ends. Make it clear to everyone involved what complete looks like. </li>\n<li>Make it easy and fun to be involved. The creative work should be the hard part, not the signup. Try to make being involved rewarding at every step of the way. </li>\n<li>Include a celebration of completion. Everyone deserves a reward for a job well done, and especially in these Quarantimes, it's important to carve out time to celebrate something. </li>\n<li>Include a social component. I almost included this point in with #3. Our listening party is both the celebration of completion and social component, but I recognize they can be separate. There's a lot of value in feeling connected with the people you're doing something with. </li>\n</ol>\n<h4 id=\"tools--\"><a href=\"#tools--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tools -</h4>\n<ol>\n<li>Google forms for signups, voting, cover submission, surveys. </li>\n<li>Email for mass communication to everyone participating. I also text people / IG or FB message people individually as needed. </li>\n<li>Soundcloud for hosting the playlist, the project deliverable. </li>\n<li>Google Meet for video conferencing. Any conferencing platform would do. </li>\n<li>I use a <a href=\"https://natespilman.com/blog/everyone-plays-the-same-song/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blogpost on my website</a> - probably the site you're reading this on - as a landing page for the project, with links to the signup and pertinent information. </li>\n</ol>\n<h4 id=\"structure--\"><a href=\"#structure--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Structure -</h4>\n<p>All forms are sent out over email</p>\n<p><strong>Signups -</strong> To sign up, each participant submits a song they're interested in covering.  I send out the signup sheet for the round and set an arbitrary deadline for when signups close. I publish this on the website and send it to my musician friends to see if they'd like to participate. </p>\n<p><strong>Cover Song Selection -</strong>  I then create another Google Form to allow participants to vote on the songs, 1 to 5. Once the submissions are in, I take all the songs submitted, put then into a playlist and task the participants to vote on the songs. Voting closes a week or so out, and the  song with the most votes is the cover song for the round. We also vote on how much time we have to record the cover - somewhere between 2 to 4 weeks. </p>\n<p><strong>Song Submission -</strong>  There is yet another Google Form for song submission. I ask participants to upload their covers to Soundcloud and provide the soundcloud link in the submission form. I also ask a few questions about their experience with the project, and when they are available for the listening party.</p>\n<p><strong>Listening Party -</strong> The listening party is held over Google Meet, scheduled based on the submission form answers. We listen to each song over headphones at the same time, and provide adulation for and feedback on each version. The two listening parties so far have been an absolute blast. </p>\n<p>In parting, I hope you use these tools and techniques to bring communities together and work on something cool. What cool thing you ask? I don't know - that's your thing. Do your thing.</p>\n"}},{"node":{"title":"A year as a Software Engineer","path":"/blog/a-year-as-a-software-engineer/","description":"A crude list of what I've learned","tags":[{"title":"software"},{"title":"tech"},{"title":"career"}],"date":"17. May 2020","content":"<p>Time has flown since I started my first full time software developer role. I wanted to reflect on my time and try to identify all the important stuff I've learned over the year. </p>\n<h4 id=\"high-level-role-details--\"><a href=\"#high-level-role-details--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>High level role details -</h4>\n<ul>\n<li>\n<p>The role is full-stack. </p>\n<ul>\n<li>Stack: MS SQL Server, ASP.NET, Vue.Js, Azure DevOps. </li>\n<li>I use python and powershell from time to time for scripting purposes. </li>\n</ul>\n</li>\n<li>I am part of a self-organizing scrum team, following Agile practices to the best of our ability. </li>\n<li>We have a culture of paired programming. </li>\n<li>We both maintain a legacy application and build modern microservices. </li>\n</ul>\n<p>I've been fortunate to work on a team of experienced developers, willing to answer the mountain of questions I've had over the year. </p>\n<h3 id=\"general-software-development-stuff--\"><a href=\"#general-software-development-stuff--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>General Software Development stuff -</h3>\n<ul>\n<li>Educational code bases and enterprise production code bases are very different places. It's the difference between adding a field to a json return object and adding a field to the json return object except the value we're trying to pull is currently not exposed to this class, and we'd really rather not break encapsulation for this purpose - so maybe we can tunnel back down to a point where the code paths meet and grab the value there? Let me spend all day trying to figure this out. </li>\n<li>\n<p>Getting code to do the thing you want it to do is the easy part. Getting code in a state of long-term readability and maintainability is where things get difficult. </p>\n<ul>\n<li>When writing a script for my own use, it's fun to see how much I can fit on one line. When writing code that will be checked into a shared code base, I am NOT trying to fit everything on one line. Instead, I'm focusing on ensuring my method names are 100% in line with what the method actually does, my variable names make sense, and that everything is in its right place. </li>\n<li>If I start an explanation with \"it's a bit of a hack, but,...\" it means I should figure out a cleaner way of achieving what I need to do. No one will be able to read my \"creative\" code down the line, even if it serves its purpose now. </li>\n</ul>\n</li>\n<li>Coding languages and frameworks are all just higher level implementations of often the same thing. Different languages have more straightforward implementations of certain concepts, but at the end of the day, each language can be used to mostly achieve the same outcome. And with that, learning C# will make you a better Python developer. Learning Javascript will make you a better Go developer, etc. </li>\n<li>\n<p>Repeat code and over-coupling are the enemies of maintainable codebases. </p>\n<ul>\n<li>To use a house as an analogy - If you want to turn your bathroom light on, the switch you flip should be in one place and one place only, and it shouldn't require also turning on the kitchen garbage disposal. </li>\n</ul>\n</li>\n<li>\n<p>Legacy codebases are great educators. Code bases evolve, but if you're not careful, parts of the codebase will get left behind. Seeing the benign messes accidentally made is a constant reminder to be mindful of the code that I'm writing. </p>\n<ul>\n<li>Maybe there was a low level class that was perfect 10 years ago, but now doesn't make as much sense. Instead of rewriting this class when it was first identified that a change was necessary, someone wrote code on top of this class that modifies the data output to make more sense with our current needs. As time progressed and needs changed, more was built on top of this class, transforming the data into something previously unrecognizable. This code runs fine, but gets more and more difficult to work with, as there is now a behemoth of infrastructure in place to correct the low level error. It would now be quite a large job cleaning this up, as this fix infrastructure is now referenced all over the code base. It would have been a lot less expensive long-term to modify the underlying class before it became an overly coupled nightmare, but that ship sailed years ago. </li>\n</ul>\n</li>\n<li>\n<p>If you can't write a unit tests for your code, there's probably something wrong with it. </p>\n<ul>\n<li>In the above coupling example, if I were writing a unit test for turning on my bathroom light and found myself having to mock a garbage disposal, that'd be a pretty good indication that I had a problem. </li>\n<li>Things that are not unit testable, such as db connections, should have as little business logic as possible. All business logic should have corresponding unit tests. </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"c-net-specific-stuff\"><a href=\"#c-net-specific-stuff\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>C# .NET Specific stuff</h3>\n<p>I basically went from not knowing C# to being a competent C# developer. Most of the credit again goes to my brilliant ever-patient coworkers for walking me through all my questions and glaring shortcomings. </p>\n<p>C# is a fantastic language for writing robust, enterprise software. Microsoft is making the development experience easier and easier, and C# &#x26; the .NET framework continue improving at a rapid clip. </p>\n<p>Below is a quick list of the more technical things that have stuck with me. </p>\n<ul>\n<li>\n<p>Encapsulation is your friend. Everything should be private - encapsulated within the class - by default. Of course things that should be public should be public, but that should be an intentional design decision. </p>\n<ul>\n<li>To use a vacuum as an example - aren't we glad that the inner workings of the suction system don't have a public interface? Instead the only public interfaces are the power plug and the on/off button. </li>\n</ul>\n</li>\n<li>\n<p>Interfaces are your friend. This is a concept that took me longer to grasp, but without it it would be impossible to write and test software on a large scale. The way it's always described is as \"a contract,\" which is both true and only makes sense if you already understand the concept. </p>\n<ul>\n<li>The way I like to describe it is, say I have a bunch of different classes that represent a bunch of different potential employees. Some of these classes inherit the interface Chef, which means these classes implement all of the methods that is in the Chef interface. In english terms - it means they can cook. If we can a Restaurant class, with the power of interfaces, the Restaurant doesn't need to use any specific class in its code. It instead can write to the Chef interface - knowing confidently that when it calls Chef.Cook() on the interface, any of the classes that implement the Chef interface will know what that means. </li>\n<li>Let's say we have class Nate. Nate implements the Chef interface, meaning Nate can do all the things that a Chef can do. It doesn't matter how Nate does it - that's specific to Nate's implementation. Nate can also implement other interfaces. If Nate implemented the SoftwareDeveloper interface, it means that Nate can also be used by the SoftwareCompany class that uses the SoftwareDeveloper in its code. </li>\n<li>Interfaces are also necessary for testing. In the above example, if the Kitchen class, instead of coding to the Chef interface, they coded to Nate, which is a class that implements the Chef interface. If I want to test the Kitchen, we now have to instantiate Nate. But if Nate also implements the SoftwareDeveloper interface, there may be a whole lot of stuff that Nate needs for SoftwareDeveloper that we don't need for Chef. If we coded to the interface instead, we wouldn't have to spin up any of the SoftwareDeveloper dependencies to test the Kitchen. Instead we can create a new class - a Mock - that is used for testing purposes only, and doesn't require anything outside of the signature you're specifically mocking.</li>\n</ul>\n</li>\n<li>I've already alluded to it a few times - but I learned how to write unit tests. I've learned Unit Tests should be seen as the business requirements of the software. \"When A occurs, X should be the outcome.\" Untested code is dangerous code, because when you need to make a change in the future, you don't have a business requirement to test against. </li>\n<li>I'm a huge fan of paired programming. It's so easy to get lost in the weeds that it's helpful to have someone there to remind you of the bigger picture. It's easy to miss a typo that your pair catches in real time. It's much easier to process a complicated workflow by talking it through with a pair.  </li>\n</ul>\n<h3 id=\"soft-skills-stuff--\"><a href=\"#soft-skills-stuff--\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Soft Skills Stuff -</h3>\n<p>Most of the items here I learned in my previous role as an Implementation Project Manager at Epic, but found effective application in the new role. </p>\n<ul>\n<li>\n<p>It's my responsibility to identify the delta between what I know and what I need to know, and then close that gap. I figure this out by asking questions until I no longer have questions. </p>\n<ul>\n<li>I spend a lot of time repeating back explanations to ensure I understand the concepts. Often I was off the mark with my understanding. </li>\n<li>One technique I learned at Epic that is works wonders for identifying gaps in understanding is to walk through your entire understanding of a technical workflow/concept/etc with the explicit instruction of \"Tell me where I'm wrong.\" </li>\n</ul>\n</li>\n<li>\n<p>I try my hardest to own my mistakes, publicly laugh at myself, and move on. If I broke something, it's better to own it and do what I can to fix it than try to hide it. There are some specific mistakes I made over the year that we as a team reference as education points. </p>\n<ul>\n<li>For example - I merged two feature branches when I meant to merge develop into a feature branch. We didn't notice for a few days. I then had to spend about a day and a half reverting and cherry picking commits to get us back to a clean place. We refer to this as \"Branchpocalypse\" and no one has made said mistake since. </li>\n</ul>\n</li>\n<li>Team culture is paramount. To paraphrase my company's CIO - \"We don't want any heroes. If you need to step up and be a hero, do, but then we need to figure out the systematic failure that required you to be a hero.\" We spend quality time as a team discussing the best way of doing things, and follow team agreements. So says the African proverb - \"If you want to go fast, go alone. If you want to go far, go together.\"</li>\n<li>Project management skills go a long way, even in this technical role. Clear note taking, confirmation that everyone's on the same page, understanding of who's responsible for what and by when, etc, have done me well this year, </li>\n</ul>\n<p>Parting thoughts - </p>\n<ul>\n<li>Azure DevOps is fantastic. It's a git based platform for maintaining code bases, and building and deploying applications from said code bases. There's learning curve, but the more I use it the more I love it. </li>\n<li>I look forward to all my second year in the biz will teach me. I look forward to seeing the downstream effects of team decisions made. I look forward to continuing to deliver quality software to our customers. </li>\n</ul>\n<p>Thanks for reading.</p>\n"}},{"node":{"title":"My best-of beginner software development educational resources list","path":"/blog/my-best-of-beginner-software-development-educational-resources-list/","description":"The educational resources that got me going","tags":[{"title":"software"},{"title":"education"},{"title":"career"}],"date":"29. March 2020","content":"<p>Over the course of the last few years, I transitioned career roles from an IT implementation project manager to software developer. I wanted to share some of the free and inexpensive resources that helped me get started in my education. </p>\n<p><strong>Note</strong> If a Udemy course is listed about $20, just wait a day. The site is constantly running sales that slash their course prices from $199 to $10-$15. </p>\n<p>This list is sort of in order of my studies, as best as I can remember. </p>\n<h3 id=\"automate-the-boring-stuff-with-python\"><a href=\"#automate-the-boring-stuff-with-python\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://automatetheboringstuff.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Automate the Boring Stuff (with python)</a></h3>\n<p><strong>language</strong>: python</p>\n<p>This is the first course I went through, and is the one that kickstarted my educational journey. It is a book and a Udemy course, though the entirety of the text and examples are on the website for free. This book assumes you have no coding background. It goes through the absolute basics, from loops to if statements to functions, and has you reading and writing files by the end of the course. This course is intended to teach you the basics and instill confidence in your furthering your coding education. </p>\n<h3 id=\"colt-steeles-sql-course\"><a href=\"#colt-steeles-sql-course\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://www.udemy.com/course/the-ultimate-mysql-bootcamp-go-from-sql-beginner-to-expert/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Colt Steele's SQL course</a></h3>\n<p><strong>language</strong>: sql</p>\n<p>I was dealing with large amounts of data at work, and decided it was in my best interest to learn SQL(often pronounced \"sequel\"). SQL allows you to persist data in database tables, and query the data. Advanced SQL can get pretty crazy, but introductory SQL is actually quite easy. Colt Steele is one of the best coding educators on the web - to the point with a great sense of humor - and by the end of this course I was reading and writing to SQL tables. Python has built in extensions to work well great with <a href=\"https://www.sqlite.org/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sqlite</a>, allowing me to integrate read/write operations into my python programs. </p>\n<h3 id=\"colt-steeles-web-development-bootcamp\"><a href=\"#colt-steeles-web-development-bootcamp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://www.udemy.com/course/the-web-developer-bootcamp/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Colt Steele's Web Development Bootcamp</a></h3>\n<p><strong>language</strong>: html/css</p>\n<p>I switched gears here to learn how to make websites, as I was doing work with friends back on the East Coast, and I volunteered to be the web guy. Again, Colt is a great teacher. This course includes javascript education as well, but at this point I was mostly here for the html/css education. This course also taught me the Bootstrap CSS framework, which I used for quite some time. </p>\n<h3 id=\"flask---the-official-docs\"><a href=\"#flask---the-official-docs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://flask.palletsprojects.com/en/1.1.x/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flask - the Official docs</a></h3>\n<p><strong>language</strong>: python</p>\n<p>This isn't a course, but it is the next area I explored. Flask is a microframework for website serving, written in Python. With Flask, I could serve html pages. </p>\n<h3 id=\"nick-walters-django-course\"><a href=\"#nick-walters-django-course\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://www.udemy.com/course/the-ultimate-beginners-guide-to-django-django-2-python-web-dev-website/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nick Walter's Django course</a></h3>\n<p><strong>language</strong>: python</p>\n<p>Django is a powerful and scaleable web framework. It does the same stuff Flask does - but it's more robust and opinionated. Nick Walter does a great job bringing you from zero to hero in the Django framework. </p>\n<p>Instagram was built in Django. I ended up writing the website for the project with friends in Django - not that I'm comparing it to Instagram. I still have a Django server floating out there in a <a href=\"https://www.digitalocean.com/products/droplets/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Digital Ocean droplet</a> to host the random stuff I want on the internet. Shout out to <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-16-04\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this document specifically</a> for helping me set up Django on my linux server. I returned to it time and time again. </p>\n<h3 id=\"javascript---understanding-the-weird-parts\"><a href=\"#javascript---understanding-the-weird-parts\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://www.udemy.com/course/understand-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Javascript - Understanding the Weird Parts </a></h3>\n<p><strong>language</strong>: javascript</p>\n<p>Javascript is the language that runs in your browser, and many modern day websites are written entirely in javascript. This was my introduction to the language, and the course is quite the deep dive. At this point, my understanding of python was enough that I was able to compare the two languages.</p>\n<h3 id=\"wes-boss-js30\"><a href=\"#wes-boss-js30\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://javascript30.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wes Bos's JS30</a></h3>\n<p><strong>language</strong>: javascript</p>\n<p>This is the course that got me actually <em>liking</em> javascript. The course is available for free, and Wes sets up each lesson so that you learn something new with each lesson, and everything you build is actually really cool. By the end of the lesson, you have a drum kit that you just coded that you can play with your laptop keyboard - for example. </p>\n<h3 id=\"vue-js-2---the-complete-guide\"><a href=\"#vue-js-2---the-complete-guide\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://www.udemy.com/course/vuejs-2-the-complete-guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue JS 2 - The Complete Guide</a></h3>\n<p><strong>language</strong>: Vuejs (javascript)</p>\n<p>Vuejs is a javascript framework for developing single page applications. In the Vue vs. React vs. Angular (and now Svelte?) debate  I firmly believe Vue is a great first javascript framework to learn. I still use Vuejs quite a lot today - including with this blog. </p>\n<h3 id=\"modern-react-with-redux\"><a href=\"#modern-react-with-redux\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://www.udemy.com/course/react-redux/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Modern React with Redux</a></h3>\n<p><strong>language</strong>: ReactJs (javascript)</p>\n<p>After learning Vue, I learned React, the Facebook developed big dog of Javascript frameworks. Stephen Grider is a great instructor, and I regularly reference this course for some of the specific techniques we learn, such as handling resizing of images when queries from an API endpoint. I made a few websites for friends in React with what I learned from the course. </p>\n<p>React is best if you are comfortable writing in Javascript, as it really bakes itself into the language. </p>\n<h3 id=\"tim-coreys-c-intro-course\"><a href=\"#tim-coreys-c-intro-course\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><a href=\"https://www.youtube.com/watch?v=h7aIzCkmbl8&#x26;list=PLLWMQd6PeGY2GVsQZ-u3DPXqwwKW8MkiP\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tim Corey's C# Intro Course</a></h3>\n<p><strong>language</strong>: C#</p>\n<p>Tim Corey is an amazing resource for all things C#. He has a ton of free content on his youtube channel, as well as paid courses on his website. This was my first entry into a statically typed object oriented language, and Tim does a great job explaining all the domain specific concepts that I didn't get prior with Python of Javascript. </p>\n<hr>\n<h3 id=\"and-by-this-point---i-was-a-software-developer\"><a href=\"#and-by-this-point---i-was-a-software-developer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>And by this point - I was a software developer</h3>\n<p>I spent a lot of time outside of these courses writing code and building based on what I learned. I learned python and sql quickly, since I was dealing with a lot of data at work, and had questions I needed answers to. I learned html/css/js to build websites for friends.  I was able to supplement my education by actually building things with what I was learning. If I could do it all again, I'd do it the exact same way. </p>\n"}}]}},"allTag":{"edges":[{"node":{"id":"beer","path":"/tags/beer/"}},{"node":{"id":"Notes","path":"/tags/Notes/"}},{"node":{"id":"vue.js","path":"/tags/vue.js/"}},{"node":{"id":"namecheap","path":"/tags/namecheap/"}},{"node":{"id":"netlifycms","path":"/tags/netlifycms/"}},{"node":{"id":"Netlify","path":"/tags/Netlify/"}},{"node":{"id":"meta","path":"/tags/meta/"}},{"node":{"id":"javascript","path":"/tags/javascript/"}},{"node":{"id":"CHOP","path":"/tags/CHOP/"}},{"node":{"id":"protest","path":"/tags/protest/"}},{"node":{"id":"BLM","path":"/tags/BLM/"}},{"node":{"id":"seattle","path":"/tags/seattle/"}},{"node":{"id":"test","path":"/tags/test/"}},{"node":{"id":"a multi-word tag","path":"/tags/a%20multi-word%20tag/"}},{"node":{"id":"singlewordtag","path":"/tags/singlewordtag/"}},{"node":{"id":"Everyone Plays the Same Song","path":"/tags/Everyone%20Plays%20the%20Same%20Song/"}},{"node":{"id":"Google Sheets","path":"/tags/Google%20Sheets/"}},{"node":{"id":"Google Forms","path":"/tags/Google%20Forms/"}},{"node":{"id":"education","path":"/tags/education/"}},{"node":{"id":"pillow","path":"/tags/pillow/"}},{"node":{"id":"data science","path":"/tags/data%20science/"}},{"node":{"id":"histogram","path":"/tags/histogram/"}},{"node":{"id":"matplotlib","path":"/tags/matplotlib/"}},{"node":{"id":"update","path":"/tags/update/"}},{"node":{"id":"misc","path":"/tags/misc/"}},{"node":{"id":"twitter","path":"/tags/twitter/"}},{"node":{"id":"guitar","path":"/tags/guitar/"}},{"node":{"id":"everyone plays the same song","path":"/tags/everyone%20plays%20the%20same%20song/"}},{"node":{"id":"organizing","path":"/tags/organizing/"}},{"node":{"id":"projects","path":"/tags/projects/"}},{"node":{"id":"creative","path":"/tags/creative/"}},{"node":{"id":"covers","path":"/tags/covers/"}},{"node":{"id":"career","path":"/tags/career/"}},{"node":{"id":"tech","path":"/tags/tech/"}},{"node":{"id":"software","path":"/tags/software/"}},{"node":{"id":"mido","path":"/tags/mido/"}},{"node":{"id":"midi","path":"/tags/midi/"}},{"node":{"id":"music","path":"/tags/music/"}},{"node":{"id":"python","path":"/tags/python/"}},{"node":{"id":"building the blog","path":"/tags/building%20the%20blog/"}},{"node":{"id":"graphql","path":"/tags/graphql/"}},{"node":{"id":"Gridsome","path":"/tags/Gridsome/"}},{"node":{"id":"Software","path":"/tags/Software/"}},{"node":{"id":"Meta","path":"/tags/Meta/"}}]}},"context":{}}