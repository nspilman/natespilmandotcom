{"hash":"1acd9ff7544f5ebc679a6336555ee451878b9c4a","data":{"tag":{"title":"pillow","belongsTo":{"edges":[{"node":{"title":"JPG Light Value Analysis with Python, PIL and MatPlotLib","path":"/blog/making-a-histogram-image-light-with-matplotlib/","description":"Building a Histogram to analyze the light values of an image","tags":[{"title":"python"},{"title":"matplotlib"},{"title":"histogram"},{"title":"data science"},{"title":"pillow"},{"title":"software"}],"date":"1. April 2020","content":"<p><em>All images used in this post are from the amazing <a href=\"Unsplash.com\">Unsplash.com</a></em></p>\n<h2 id=\"introduction\"><a href=\"#introduction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Introduction</h2>\n<p>We'll be making a histogram using <code>matplotlib</code> to display light distribution of pixel count in JPG images. Each pixel has an RGB value(red, green, blue) ranging 0 to 255, with the light value representing the sum of those values. <code>(0,0,0)</code> is black - zero light, and <code>(255,255,255)</code> is white - full light. Our <code>x</code> axis range will be 0 to 765. </p>\n<p>For example -  The light distribution of the this image ...</p>\n<p><br><img src=\"https://images.unsplash.com/photo-1583364481915-dacea3e06d18?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=600&#x26;q=80\" alt=\"alt text\" title=\"Example Image for Light Distribution\"></p>\n<p>is this - </p>\n<p><img src=\"/uploads/3lightdistroimages_introexample.png\"></p>\n<p>We can see a large distribution of dark pixels than light ones. </p>\n<p>Why are we doing this? Because we can! While I don't have a ton of specific use cases for this, being able to use data to answer questions is important. Our initial question is \"What is the light distribution of this image?\" </p>\n<h2 id=\"what-well-be-doing\"><a href=\"#what-well-be-doing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What we'll be doing?</h2>\n<p>All of the following steps are in Python.  </p>\n<ol>\n<li>Use <code>PIL</code> to load an image into memory. </li>\n<li>Shrink the image down to a pixel size we can more easily view. </li>\n<li>Use <code>numpy</code> to convert our image into an array. Flatten the 3d array into a 2d array of the RGB values. </li>\n<li>Convert the pixel array into an array of the pixel light values - the sun of the rgb values.  </li>\n<li>Use <code>matplotlib</code> to generate the histogram. </li>\n</ol>\n<p>Let's get started! </p>\n<hr>\n<h2 id=\"use-pil-to-load-an-image-into-memory\"><a href=\"#use-pil-to-load-an-image-into-memory\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Use PIL to load an image into memory.</h2>\n<p>PIL is an absolutely magical package for image processing.  I created the <code>getImageFromUrl(url)</code> method that takes in a url, uses python's <code>requests</code> package to make the https request, and then load the image. We need to pass the response content into BytesIO to read the requests content into a format that PIL can consume and convert into an Image object. </p>\n<p>By the end of this code, we have an image from the internet in memory as a PIL.Image object. </p>\n<pre><code class=\"language-python\">from PIL import Image\nimport requests\n\ndef getImageFromUrl(url):\n    response = requests.get(url)\n    return Image.open(BytesIO(response.content))\n\nimageUrl = \"https://images.unsplash.com/photo-1583364481915-dacea3e06d18?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=600&#x26;q=80\"\n\nimage = getImageFromUrl(imageUrl)\n</code></pre>\n<hr>\n<h2 id=\"shrink-the-image-down-to-a-pixel-size-we-can-more-easily-view\"><a href=\"#shrink-the-image-down-to-a-pixel-size-we-can-more-easily-view\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Shrink the image down to a pixel size we can more easily view.</h2>\n<p>I created a helper method to resize the image file so that it's largest side is a pixel count we pass in. This is to keep pixel count low enough to analyze quickly and in a controlled way. By the end of this block, we have a resized image with 150 pixels as the largest side, and the aspect ratio remaining the same. </p>\n<pre><code class=\"language-python\">def resize_setLargestSide(image,maxSide):\n    width,height = image.size\n    widthRatio = width / (width + height)\n    heightRatio = height / (width + height)\n    if width > height:\n        newWidth = maxSide\n        widthPlusHeight = newWidth / widthRatio\n        newHeight = widthPlusHeight - newWidth\n    else:\n        newHeight = maxSide\n        widthPlusHeight = newHeight / heightRatio\n        newWidth = widthPlusHeight - newHeight\n    return image.resize((int(newWidth),int(newHeight)))\n\nnewImage = resize_setLargestSide(image,150)\n</code></pre>\n<hr>\n<h2 id=\"use-numpy-to-convert-our-image-into-an-array-flatten-the-3d-array-into-a-2d-array-of-the-rgb-values\"><a href=\"#use-numpy-to-convert-our-image-into-an-array-flatten-the-3d-array-into-a-2d-array-of-the-rgb-values\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Use <code>numpy</code> to convert our image into an array. Flatten the 3d array into a 2d array of the RGB values.</h2>\n<p>the <code>np.array</code> method converts a PIL.Image object to a 3d np array - height by width by pixels (r,g,b). numpy arrays have the property <code>shape</code>, which in the case below returns the width, height, and 3, which is the length of the pixel. I create <code>flattenedShape</code> which will be used to convert the 3d array into a 2d array by multiplying the length by width, which is then passed into <code>reshape()</code>, a method that lives on the np array.</p>\n<p><code>reshape()</code> only works if the number of values remains the same, so had  I not multiplied width by height, <code>reshape()</code> would have failed. </p>\n<pre><code class=\"language-python\">import numpy as np\n\nimageArray = np.array(newImage)\nshape = imageArray.shape\nflattenedShape = (shape[0] * shape[1],shape[2])\nreshapedImage = imageArray.reshape(flattenedShape)\n</code></pre>\n<hr>\n<h2 id=\"convert-the-pixel-array-into-an-array-of-the-pixel-light-values---the-sun-of-the-rgb-values\"><a href=\"#convert-the-pixel-array-into-an-array-of-the-pixel-light-values---the-sun-of-the-rgb-values\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Convert the pixel array into an array of the pixel light values - the sun of the rgb values.</h2>\n<p>Boy do I love <a href=\"https://www.pythonforbeginners.com/basics/list-comprehensions-in-python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">list comprehensions.</a> Below takes the 2d array and converts it to a 1 dimensional array of pixel light values, by summing the 3 values of the pixel.  At this point, we have our data ready to graph!</p>\n<pre><code class=\"language-python\">lightValues = [sum(pixel) for pixel in reshapedImage]\n</code></pre>\n<hr>\n<h2 id=\"use-matplotlib-to-generate-the-histogram\"><a href=\"#use-matplotlib-to-generate-the-histogram\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Use <code>matplotlib</code> to generate the histogram.</h2>\n<p>And now, we graph! </p>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\n\nplt.hist(lightValues, bins=20, facecolor = 'blue')\nplt.ylabel(\"Amount of Light\")\nplt.xlabel(\"Pixel Concentration\")\nplt.title('Light Values')\nplt.axis([0,775,0,4000])\nplt.show()\n</code></pre>\n<h2 id=\"full-code\"><a href=\"#full-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Full Code</h2>\n<pre><code class=\"language-python\">from PIL import Image\nfrom io import BytesIO\nimport requests\n\ndef getImageFromUrl(url):\n    response = requests.get(url)\n    return Image.open(BytesIO(response.content))\n\nimageUrl = \"https://images.unsplash.com/photo-1583364481915-dacea3e06d18?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=600&#x26;q=80\"\n\nimage = getImageFromUrl(imageUrl)\n\ndef resize_setLargestSide(image,maxSide):\n    width,height = image.size\n    widthRatio = width / (width + height)\n    heightRatio = height / (width + height)\n    if width > height:\n        newWidth = maxSide\n        widthPlusHeight = newWidth / widthRatio\n        newHeight = widthPlusHeight - newWidth\n    else:\n        newHeight = maxSide\n        widthPlusHeight = newHeight / heightRatio\n        newWidth = widthPlusHeight - newHeight\n    return image.resize((int(newWidth),int(newHeight)))\n\nnewImage = resize_setLargestSide(image,150)\n\nimport numpy as np\n\nimageArray = np.array(newImage)\nshape = imageArray.shape\nflattenedShape = (shape[0] * shape[1],shape[2])\nreshapedImage = imageArray.reshape(flattenedShape)\n\nlightValues = [sum(pixel) for pixel in reshapedImage]\n\nimport matplotlib.pyplot as plt\n\nplt.hist(lightValues, bins=20, facecolor = 'blue')\nplt.ylabel(\"Amount of Light\")\nplt.xlabel(\"Pixel Concentration\")\nplt.title('Light Values')\nplt.axis([0,775,0,4000])\nplt.show()\n</code></pre>\n<h2 id=\"example-outputs\"><a href=\"#example-outputs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Example Outputs</h2>\n<h4 id=\"input\"><a href=\"#input\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>input</h4>\n<p><img src=\"https://images.unsplash.com/photo-1514729077270-37608dea7d7d?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=600&#x26;q=80\" alt=\"High Contrast - Dark and Light\" title=\"High Contrast - Dark and Light\"></p>\n<h4 id=\"output\"><a href=\"#output\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>output</h4>\n<p><img src=\"/uploads/3lightdistroimages_darkimage.png\" alt=\"Dark Image light distribution\" title=\"Dark Image light distribution\"></p>\n<hr>\n<h4 id=\"input-1\"><a href=\"#input-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>input</h4>\n<p><img src=\"https://images.unsplash.com/photo-1516649195228-a023c093df99?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=600&#x26;q=80\" alt=\"More Neutral Image\" title=\"More Neutral Image\"></p>\n<h4 id=\"output-1\"><a href=\"#output-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>output</h4>\n<p><img src=\"/uploads/3lightdistroimages_neutralimage.png\" alt=\"Dark Image neutral distribution\" title=\"Dark Image neutral distribution\"></p>\n<hr>\n<h4 id=\"input-2\"><a href=\"#input-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>input</h4>\n<p><img src=\"https://images.unsplash.com/photo-1538935516496-9972a989f715?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=600&#x26;q=80\" alt=\"Bright Image\" title=\"Bright Image\"></p>\n<h4 id=\"output-2\"><a href=\"#output-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>output</h4>\n<p><img src=\"/uploads/3lightdistroimages_lightimage.png\" alt=\"Dark Image light distribution\" title=\"Dark Image light distribution\"></p>\n"}}]}},"allTag":{"edges":[{"node":{"id":"beer","path":"/tags/beer/"}},{"node":{"id":"Notes","path":"/tags/Notes/"}},{"node":{"id":"vue.js","path":"/tags/vue.js/"}},{"node":{"id":"namecheap","path":"/tags/namecheap/"}},{"node":{"id":"netlifycms","path":"/tags/netlifycms/"}},{"node":{"id":"Netlify","path":"/tags/Netlify/"}},{"node":{"id":"meta","path":"/tags/meta/"}},{"node":{"id":"javascript","path":"/tags/javascript/"}},{"node":{"id":"CHOP","path":"/tags/CHOP/"}},{"node":{"id":"protest","path":"/tags/protest/"}},{"node":{"id":"BLM","path":"/tags/BLM/"}},{"node":{"id":"seattle","path":"/tags/seattle/"}},{"node":{"id":"test","path":"/tags/test/"}},{"node":{"id":"a multi-word tag","path":"/tags/a%20multi-word%20tag/"}},{"node":{"id":"singlewordtag","path":"/tags/singlewordtag/"}},{"node":{"id":"Everyone Plays the Same Song","path":"/tags/Everyone%20Plays%20the%20Same%20Song/"}},{"node":{"id":"Google Sheets","path":"/tags/Google%20Sheets/"}},{"node":{"id":"Google Forms","path":"/tags/Google%20Forms/"}},{"node":{"id":"education","path":"/tags/education/"}},{"node":{"id":"pillow","path":"/tags/pillow/"}},{"node":{"id":"data science","path":"/tags/data%20science/"}},{"node":{"id":"histogram","path":"/tags/histogram/"}},{"node":{"id":"matplotlib","path":"/tags/matplotlib/"}},{"node":{"id":"update","path":"/tags/update/"}},{"node":{"id":"misc","path":"/tags/misc/"}},{"node":{"id":"twitter","path":"/tags/twitter/"}},{"node":{"id":"guitar","path":"/tags/guitar/"}},{"node":{"id":"everyone plays the same song","path":"/tags/everyone%20plays%20the%20same%20song/"}},{"node":{"id":"organizing","path":"/tags/organizing/"}},{"node":{"id":"projects","path":"/tags/projects/"}},{"node":{"id":"creative","path":"/tags/creative/"}},{"node":{"id":"covers","path":"/tags/covers/"}},{"node":{"id":"career","path":"/tags/career/"}},{"node":{"id":"tech","path":"/tags/tech/"}},{"node":{"id":"software","path":"/tags/software/"}},{"node":{"id":"mido","path":"/tags/mido/"}},{"node":{"id":"midi","path":"/tags/midi/"}},{"node":{"id":"music","path":"/tags/music/"}},{"node":{"id":"python","path":"/tags/python/"}},{"node":{"id":"building the blog","path":"/tags/building%20the%20blog/"}},{"node":{"id":"graphql","path":"/tags/graphql/"}},{"node":{"id":"Gridsome","path":"/tags/Gridsome/"}},{"node":{"id":"Software","path":"/tags/Software/"}},{"node":{"id":"Meta","path":"/tags/Meta/"}}]}},"context":{}}